import { Supadata } from '@supadata/js';

// Initialize the client
const supadata = new Supadata({
    apiKey: 'sd_cf39c3a6069af680097faf6f996b8c16',
});

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è batch job
export async function createTranscriptBatch(videoIds) {
    try {
        console.log(`üöÄ [SUPADATA] –°–æ–∑–¥–∞–µ–º batch job –¥–ª—è ${videoIds.length} –≤–∏–¥–µ–æ —á–µ—Ä–µ–∑ SDK`);
        
        // Start a YouTube transcript batch job
        const transcriptBatch = await supadata.youtube.transcript.batch({
            videoIds: videoIds,
            lang: 'en',
            text: true
        });
        
        console.log(`üìã [SUPADATA] Batch job —Å–æ–∑–¥–∞–Ω: ${transcriptBatch.jobId}`);
        return transcriptBatch.jobId;
        
    } catch (error) {
        console.error('[SUPADATA] –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è batch job:', error);
        throw error;
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ batch job
export async function checkBatchStatus(jobId) {
    try {
        console.log(`üìä [SUPADATA] –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å batch job: ${jobId}`);
        
        // Check the status of a batch job
        const batchResult = await supadata.youtube.batch.getJobStatus(jobId);
        
        console.log(`üìä [SUPADATA] Batch status: ${batchResult.status}`);
        return batchResult;
        
    } catch (error) {
        console.error('[SUPADATA] –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞:', error);
        throw error;
    }
} 