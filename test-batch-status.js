import { Supadata } from '@supadata/js';
import OpenAI from 'openai';

// Initialize the client
const supadata = new Supadata({
    apiKey: 'sd_cf39c3a6069af680097faf6f996b8c16'
});

// Initialize OpenAI client
const openai = new OpenAI({
    apiKey: process.env.OPENAI_API_KEY // –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —É –≤–∞—Å –µ—Å—Ç—å OPENAI_API_KEY –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
});

async function getTranscriptSummary(jobId, userQuery) {
    try {
        console.log('üîç –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã batch job...');
        
        // –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã batch job
        const batchResults = await supadata.youtube.batch.getBatchResults(jobId);
        
        if (batchResults.status !== 'completed') {
            throw new Error(`Batch job –Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω. –°—Ç–∞—Ç—É—Å: ${batchResults.status}`);
        }
        
        console.log('‚úÖ Batch job –∑–∞–≤–µ—Ä—à–µ–Ω, –∏–∑–≤–ª–µ–∫–∞–µ–º transcript –ø–æ–ª—è...');
        
        // –ò–∑–≤–ª–µ–∫–∞–µ–º transcript –ø–æ–ª—è –∏–∑ –∫–∞–∂–¥–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞
        const transcripts = batchResults.results
            .filter(result => result.transcript) // –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –æ–±—ä–µ–∫—Ç—ã —Å transcript
            .map(result => result.transcript);
        
        if (transcripts.length === 0) {
            throw new Error('–ù–µ –Ω–∞–π–¥–µ–Ω–æ –Ω–∏ –æ–¥–Ω–æ–≥–æ transcript –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞—Ö');
        }
        
        console.log(`üìù –ù–∞–π–¥–µ–Ω–æ ${transcripts.length} transcript(–æ–≤)`);
        
        // –û–±—ä–µ–¥–∏–Ω—è–µ–º –≤—Å–µ transcript –≤ –æ–¥–∏–Ω —Ç–µ–∫—Å—Ç
        const combinedTranscripts = transcripts.join('\n\n---\n\n');
        
        console.log('ü§ñ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ OpenAI –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ä–µ–∑—é–º–µ...');
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ OpenAI –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ä–µ–∑—é–º–µ
        const completion = await openai.chat.completions.create({
            model: 'gpt-4o',
            messages: [
                {
                    role: 'system',
                    content: '–¢—ã - —ç–∫—Å–ø–µ—Ä—Ç –ø–æ –∞–Ω–∞–ª–∏–∑—É –≤–∏–¥–µ–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞. –¢–≤–æ—è –∑–∞–¥–∞—á–∞ - —Å–æ–∑–¥–∞—Ç—å –∫—Ä–∞—Ç–∫–æ–µ –∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω–æ–µ —Ä–µ–∑—é–º–µ –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã—Ö —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç–æ–≤ –≤–∏–¥–µ–æ.'
                },
                {
                    role: 'user',
                    content: `–°–æ–∑–¥–∞–π —Ä–µ–∑—é–º–µ –ø–æ —Å–ª–µ–¥—É—é—â–∏–º –≤–∏–¥–µ–æ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∑–∞–ø—Ä–æ—Å–∞: "${userQuery}"\n\n–¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç—ã –≤–∏–¥–µ–æ:\n\n${combinedTranscripts}`
                }
            ],
            max_tokens: 2000,
            temperature: 0.7
        });
        
        const summary = completion.choices[0].message.content;
        console.log('‚úÖ –†–µ–∑—é–º–µ —Å–æ–∑–¥–∞–Ω–æ —É—Å–ø–µ—à–Ω–æ!');
        
        return {
            summary,
            transcriptCount: transcripts.length,
            totalResults: batchResults.results.length
        };
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ä–µ–∑—é–º–µ:', error.message);
        throw error;
    }
}

async function testBatchStatus() {
    const jobId = 'aadd0959-70f3-46e4-bd1b-caa45f72b293';
    
    console.log('üîç [TEST] –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –º–µ—Ç–æ–¥—ã supadata.youtube.batch:');
    console.log(Object.getOwnPropertyNames(supadata.youtube.batch));
    console.log(Object.keys(supadata.youtube.batch));
    
    console.log('\nüîç [TEST] –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–æ—Ç–æ—Ç–∏–ø:');
    console.log(Object.getOwnPropertyNames(Object.getPrototypeOf(supadata.youtube.batch)));
    
    console.log('\nüîç [TEST] –í—Å–µ –º–µ—Ç–æ–¥—ã –æ–±—ä–µ–∫—Ç–∞:');
    let obj = supadata.youtube.batch;
    while (obj) {
        console.log('–£—Ä–æ–≤–µ–Ω—å:', Object.getOwnPropertyNames(obj));
        obj = Object.getPrototypeOf(obj);
        if (obj === Object.prototype) break;
    }
    
    // –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –º–µ—Ç–æ–¥–æ–≤
    const methods = ['getJobStatus', 'status', 'get', 'getStatus', 'jobStatus'];
    
    for (const method of methods) {
        console.log(`\nüß™ [TEST] –ü—Ä–æ–±—É–µ–º –º–µ—Ç–æ–¥: ${method}`);
        if (typeof supadata.youtube.batch[method] === 'function') {
            console.log(`‚úÖ [TEST] –ú–µ—Ç–æ–¥ ${method} —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!`);
            try {
                const result = await supadata.youtube.batch[method](jobId);
                console.log(`‚úÖ [TEST] –†–µ–∑—É–ª—å—Ç–∞—Ç ${method}:`, result);
                break;
            } catch (error) {
                console.log(`‚ùå [TEST] –û—à–∏–±–∫–∞ ${method}:`, error.message);
            }
        } else {
            console.log(`‚ùå [TEST] –ú–µ—Ç–æ–¥ ${method} –Ω–µ –Ω–∞–π–¥–µ–Ω`);
        }
    }
    
    // –ü—Ä–æ–±—É–µ–º –ø—Ä—è–º–æ–π HTTP –∑–∞–ø—Ä–æ—Å
    console.log('\nüåê [TEST] –ü—Ä–æ–±—É–µ–º –ø—Ä—è–º–æ–π HTTP –∑–∞–ø—Ä–æ—Å:');
    try {
        const response = await fetch(`https://api.supadata.ai/v1/youtube/batch/${jobId}`, {
            headers: {
                'x-api-key': 'sd_cf39c3a6069af680097faf6f996b8c16'
            }
        });
        
        console.log(`üì° [TEST] HTTP —Å—Ç–∞—Ç—É—Å: ${response.status}`);
        const data = await response.json();
        console.log(`üìÑ [TEST] HTTP –æ—Ç–≤–µ—Ç:`, data);
        
    } catch (error) {
        console.log(`‚ùå [TEST] HTTP –æ—à–∏–±–∫–∞:`, error.message);
    }
}

// –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ä–µ–∑—é–º–µ
async function testTranscriptSummary() {
    const jobId = 'aadd0959-70f3-46e4-bd1b-caa45f72b293';
    const userQuery = '–ö–∞–∫–∏–µ –æ—Å–Ω–æ–≤–Ω—ã–µ —Ç–µ–º—ã –æ–±—Å—É–∂–¥–∞—é—Ç—Å—è –≤ —ç—Ç–∏—Ö –≤–∏–¥–µ–æ?';
    
    try {
        console.log('üöÄ –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∑—é–º–µ...');
        const result = await getTranscriptSummary(jobId, userQuery);
        
        console.log('\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã:');
        console.log(`- –í—Å–µ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: ${result.totalResults}`);
        console.log(`- Transcript –Ω–∞–π–¥–µ–Ω–æ: ${result.transcriptCount}`);
        console.log('\nüìù –†–µ–∑—é–º–µ:');
        console.log(result.summary);
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏:', error.message);
    }
}

// –†–∞—Å–∫–æ–º–º–µ–Ω—Ç–∏—Ä—É–π—Ç–µ —Å–ª–µ–¥—É—é—â—É—é —Å—Ç—Ä–æ–∫—É –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–∏ —Ä–µ–∑—é–º–µ
// testTranscriptSummary().catch(console.error);

testBatchStatus().catch(console.error);