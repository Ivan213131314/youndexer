// –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
require('dotenv').config();

const { Supadata } = require('@supadata/js');
const OpenAI = require('openai');

// Initialize the clients
const supadata = new Supadata({
    apiKey: 'sd_cf39c3a6069af680097faf6f996b8c16'
});

// –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ OpenAI API –∫–ª—é—á–∞
const openaiApiKey = process.env.OPENAI_API_KEY || process.env.REACT_APP_OPENAI_API_KEY;
if (!openaiApiKey || openaiApiKey === 'your-openai-api-key-here') {
    console.error('‚ùå –û—à–∏–±–∫–∞: –ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω OPENAI_API_KEY –∏–ª–∏ REACT_APP_OPENAI_API_KEY –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è');
    console.error('üìù –°–æ–∑–¥–∞–π—Ç–µ —Ñ–∞–π–ª .env —Å –≤–∞—à–∏–º OpenAI API –∫–ª—é—á–æ–º');
    process.exit(1);
}

const openai = new OpenAI({
    apiKey: openaiApiKey
});

/**
 * –ü–æ–ª—É—á–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã batch job –∏–∑ Supadata, –∏–∑–≤–ª–µ–∫–∞–µ—Ç transcript –ø–æ–ª—è
 * –∏ —Å–æ–∑–¥–∞–µ—Ç —Ä–µ–∑—é–º–µ —Å –ø–æ–º–æ—â—å—é OpenAI
 * 
 * @param {string} jobId - ID batch job –∏–∑ Supadata
 * @param {string} userQuery - –ó–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ä–µ–∑—é–º–µ
 * @returns {Promise<Object>} –û–±—ä–µ–∫—Ç —Å —Ä–µ–∑—é–º–µ –∏ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–º–∏
 */
async function getTranscriptSummary(jobId, userQuery) {
    try {
        console.log('üîç –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã batch job...');
        
        // –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã batch job
        const batchResults = await supadata.youtube.batch.getBatchResults(jobId);
        
        if (batchResults.status !== 'completed') {
            throw new Error(`Batch job –Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω. –°—Ç–∞—Ç—É—Å: ${batchResults.status}`);
        }
        
        console.log('‚úÖ Batch job –∑–∞–≤–µ—Ä—à–µ–Ω, –∏–∑–≤–ª–µ–∫–∞–µ–º transcript –ø–æ–ª—è...');
        
        // –ò–∑–≤–ª–µ–∫–∞–µ–º transcript –ø–æ–ª—è –∏–∑ –∫–∞–∂–¥–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞
        const transcripts = batchResults.results
            .filter(result => result.transcript) // –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –æ–±—ä–µ–∫—Ç—ã —Å transcript
            .map(result => result.transcript);
        
        if (transcripts.length === 0) {
            throw new Error('–ù–µ –Ω–∞–π–¥–µ–Ω–æ –Ω–∏ –æ–¥–Ω–æ–≥–æ transcript –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞—Ö');
        }
        
        console.log(`üìù –ù–∞–π–¥–µ–Ω–æ ${transcripts.length} transcript(–æ–≤)`);
        
        // –û–±—ä–µ–¥–∏–Ω—è–µ–º –≤—Å–µ transcript –≤ –æ–¥–∏–Ω —Ç–µ–∫—Å—Ç
        const combinedTranscripts = transcripts.join('\n\n---\n\n');
        
        console.log('ü§ñ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ OpenAI –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ä–µ–∑—é–º–µ...');
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ OpenAI –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ä–µ–∑—é–º–µ
        const completion = await openai.chat.completions.create({
            model: 'gpt-4o',
            messages: [
                {
                    role: 'system',
                    content: '–¢—ã - —ç–∫—Å–ø–µ—Ä—Ç –ø–æ –∞–Ω–∞–ª–∏–∑—É –≤–∏–¥–µ–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞. –°–æ–∑–¥–∞–≤–∞–π –∫—Ä–∞—Ç–∫–∏–µ –∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω—ã–µ —Ä–µ–∑—é–º–µ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç–æ–≤ –≤–∏–¥–µ–æ.'
                },
                {
                    role: 'user',
                    content: `–ó–∞–ø—Ä–æ—Å: ${userQuery}\n\n–¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç—ã:\n${combinedTranscripts}`
                }
            ],
            max_tokens: 2000,
            temperature: 0.7
        });
        
        const summary = completion.choices[0].message.content;
        console.log('‚úÖ –†–µ–∑—é–º–µ —Å–æ–∑–¥–∞–Ω–æ —É—Å–ø–µ—à–Ω–æ!');
        
        return {
            summary,
            transcriptCount: transcripts.length,
            totalResults: batchResults.results.length,
            jobId,
            userQuery
        };
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ä–µ–∑—é–º–µ:', error.message);
        throw error;
    }
}

/**
 * –ü–æ–ª—É—á–∞–µ—Ç —Ç–æ–ª—å–∫–æ transcript –ø–æ–ª—è –∏–∑ batch job –±–µ–∑ —Å–æ–∑–¥–∞–Ω–∏—è —Ä–µ–∑—é–º–µ
 * 
 * @param {string} jobId - ID batch job –∏–∑ Supadata
 * @returns {Promise<Array>} –ú–∞—Å—Å–∏–≤ transcript –ø–æ–ª–µ–π
 */
async function getTranscriptsOnly(jobId) {
    try {
        console.log('üîç –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã batch job...');
        
        const batchResults = await supadata.youtube.batch.getBatchResults(jobId);
        
        if (batchResults.status !== 'completed') {
            throw new Error(`Batch job –Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω. –°—Ç–∞—Ç—É—Å: ${batchResults.status}`);
        }
        
        // –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–æ–ª—å–∫–æ transcript –ø–æ–ª—è
        const transcripts = batchResults.results
            .filter(result => result.transcript)
            .map(result => result.transcript);
        
        console.log(`üìù –ù–∞–π–¥–µ–Ω–æ ${transcripts.length} transcript(–æ–≤)`);
        
        return transcripts;
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ transcript:', error.message);
        throw error;
    }
}

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è CommonJS
module.exports = { getTranscriptSummary, getTranscriptsOnly }; 