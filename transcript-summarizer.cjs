// –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
require('dotenv').config();

const { Supadata } = require('@supadata/js');

// Initialize the clients
const supadata = new Supadata({
    apiKey: 'sd_cf39c3a6069af680097faf6f996b8c16'
});

// –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ OpenRouter API –∫–ª—é—á–∞
const openRouterApiKey = process.env.REACT_APP_OPEN_ROUTER_API_KEY;
if (!openRouterApiKey) {
    console.error('‚ùå –û—à–∏–±–∫–∞: –ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω REACT_APP_OPEN_ROUTER_API_KEY –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è');
    console.error('üìù –°–æ–∑–¥–∞–π—Ç–µ —Ñ–∞–π–ª .env —Å –≤–∞—à–∏–º OpenRouter API –∫–ª—é—á–æ–º');
    process.exit(1);
}

/**
 * –ü–æ–ª—É—á–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã batch job –∏–∑ Supadata, –∏–∑–≤–ª–µ–∫–∞–µ—Ç transcript –ø–æ–ª—è
 * –∏ —Å–æ–∑–¥–∞–µ—Ç —Ä–µ–∑—é–º–µ —Å –ø–æ–º–æ—â—å—é OpenAI
 * 
 * @param {string} jobId - ID batch job –∏–∑ Supadata
 * @param {string} userQuery - –ó–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ä–µ–∑—é–º–µ
 * @returns {Promise<Object>} –û–±—ä–µ–∫—Ç —Å —Ä–µ–∑—é–º–µ –∏ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–º–∏
 */
async function getTranscriptSummary(jobId, userQuery) {
    try {
        console.log('üîç –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã batch job...');
        
        // –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã batch job
        const batchResults = await supadata.youtube.batch.getBatchResults(jobId);
        
        if (batchResults.status !== 'completed') {
            throw new Error(`Batch job –Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω. –°—Ç–∞—Ç—É—Å: ${batchResults.status}`);
        }
        
        console.log('‚úÖ Batch job –∑–∞–≤–µ—Ä—à–µ–Ω, –∏–∑–≤–ª–µ–∫–∞–µ–º transcript –ø–æ–ª—è...');
        
        // –ò–∑–≤–ª–µ–∫–∞–µ–º transcript –ø–æ–ª—è –∏–∑ –∫–∞–∂–¥–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞
        const transcripts = batchResults.results
            .filter(result => result.transcript) // –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –æ–±—ä–µ–∫—Ç—ã —Å transcript
            .map(result => {
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É transcript –æ–±—ä–µ–∫—Ç–∞
                if (typeof result.transcript === 'string') {
                    return result.transcript;
                } else if (result.transcript && result.transcript.content) {
                    return result.transcript.content;
                } else if (result.transcript && result.transcript.text) {
                    return result.transcript.text;
                } else {
                    console.log('‚ö†Ô∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ transcript:', result.transcript);
                    return JSON.stringify(result.transcript);
                }
            });
        
        if (transcripts.length === 0) {
            throw new Error('–ù–µ –Ω–∞–π–¥–µ–Ω–æ –Ω–∏ –æ–¥–Ω–æ–≥–æ transcript –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞—Ö. –í–æ–∑–º–æ–∂–Ω–æ, Supadata API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.');
        }
        
        console.log(`üìù –ù–∞–π–¥–µ–Ω–æ ${transcripts.length} transcript(–æ–≤)`);
        
        // –õ–æ–≥–∏—Ä—É–µ–º –ø–µ—Ä–≤—ã–µ —Å–∏–º–≤–æ–ª—ã –∫–∞–∂–¥–æ–≥–æ transcript –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        transcripts.forEach((transcript, index) => {
            console.log(`üìÑ Transcript ${index + 1} (–ø–µ—Ä–≤—ã–µ 100 —Å–∏–º–≤–æ–ª–æ–≤): ${transcript.substring(0, 100)}...`);
        });
        
        // –õ–æ–≥–∏—Ä—É–µ–º –ø–æ–ª–Ω—ã–µ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç—ã
        console.log('\nüìÑ [TRANSCRIPTS] –ü–û–õ–ù–´–ï –¢–†–ê–ù–°–ö–†–ò–ü–¢–´:');
        console.log('='.repeat(80));
        transcripts.forEach((transcript, index) => {
            console.log(`\n--- TRANSCRIPT ${index + 1} ---`);
            console.log(transcript);
            console.log(`--- –ö–û–ù–ï–¶ TRANSCRIPT ${index + 1} ---\n`);
        });
        console.log('='.repeat(80));
        
        // –û–±—ä–µ–¥–∏–Ω—è–µ–º –≤—Å–µ transcript –≤ –æ–¥–∏–Ω —Ç–µ–∫—Å—Ç
        const combinedTranscripts = transcripts.join('\n\n---\n\n');
        
        console.log('ü§ñ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ OpenRouter –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ä–µ–∑—é–º–µ...');
        
        // –§–æ—Ä–º–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å –¥–ª—è LLM
        const systemPrompt = '–¢—ã - —ç–∫—Å–ø–µ—Ä—Ç –ø–æ –∞–Ω–∞–ª–∏–∑—É –≤–∏–¥–µ–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞. –°–æ–∑–¥–∞–≤–∞–π –∫—Ä–∞—Ç–∫–∏–µ –∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω—ã–µ —Ä–µ–∑—é–º–µ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç–æ–≤ –≤–∏–¥–µ–æ.';
        const userPrompt = `–ó–∞–ø—Ä–æ—Å: ${userQuery}\n\n–¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç—ã:\n${combinedTranscripts}`;
        
        console.log('üì§ [OPENROUTER] System Prompt:');
        console.log('='.repeat(80));
        console.log(systemPrompt);
        console.log('='.repeat(80));
        console.log('\nüì§ [OPENROUTER] User Prompt (–ü–û–õ–ù–´–ô –ó–ê–ü–†–û–°):');
        console.log('='.repeat(80));
        console.log(userPrompt);
        console.log('='.repeat(80));
        console.log(`\nüìä [OPENROUTER] –û–±—â–∞—è –¥–ª–∏–Ω–∞ –∑–∞–ø—Ä–æ—Å–∞: ${userPrompt.length} —Å–∏–º–≤–æ–ª–æ–≤`);
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ OpenRouter –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ä–µ–∑—é–º–µ
        const response = await fetch('https://openrouter.ai/api/v1/chat/completions', {
            method: 'POST',
            headers: {
                'Authorization': `Bearer ${openRouterApiKey}`,
                'HTTP-Referer': 'http://localhost:3001',
                'X-Title': 'YouTube Searcher',
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                model: 'openai/gpt-4o',
                messages: [
                    {
                        role: 'system',
                        content: systemPrompt
                    },
                    {
                        role: 'user',
                        content: userPrompt
                    }
                ],
                max_tokens: 2000,
                temperature: 0.7
            })
        });

        if (!response.ok) {
            const errorData = await response.json();
            throw new Error(`OpenRouter API error: ${errorData.error?.message || response.statusText}`);
        }

        const completion = await response.json();
        const summary = completion.choices[0].message.content;
        console.log('‚úÖ –†–µ–∑—é–º–µ —Å–æ–∑–¥–∞–Ω–æ —É—Å–ø–µ—à–Ω–æ!');
        console.log('üì• [OPENROUTER] –û—Ç–≤–µ—Ç –æ—Ç LLM:');
        console.log(summary);
        console.log(`üìä [OPENROUTER] –î–ª–∏–Ω–∞ –æ—Ç–≤–µ—Ç–∞: ${summary.length} —Å–∏–º–≤–æ–ª–æ–≤`);
        
        return {
            summary,
            transcriptCount: transcripts.length,
            totalResults: batchResults.results.length,
            jobId,
            userQuery
        };
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ä–µ–∑—é–º–µ:', error.message);
        throw error;
    }
}

/**
 * –ü–æ–ª—É—á–∞–µ—Ç —Ç–æ–ª—å–∫–æ transcript –ø–æ–ª—è –∏–∑ batch job –±–µ–∑ —Å–æ–∑–¥–∞–Ω–∏—è —Ä–µ–∑—é–º–µ
 * 
 * @param {string} jobId - ID batch job –∏–∑ Supadata
 * @returns {Promise<Array>} –ú–∞—Å—Å–∏–≤ transcript –ø–æ–ª–µ–π
 */
async function getTranscriptsOnly(jobId) {
    try {
        console.log('üîç –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã batch job...');
        
        const batchResults = await supadata.youtube.batch.getBatchResults(jobId);
        
        if (batchResults.status !== 'completed') {
            throw new Error(`Batch job –Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω. –°—Ç–∞—Ç—É—Å: ${batchResults.status}`);
        }
        
        // –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–æ–ª—å–∫–æ transcript –ø–æ–ª—è
        const transcripts = batchResults.results
            .filter(result => result.transcript)
            .map(result => {
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É transcript –æ–±—ä–µ–∫—Ç–∞
                if (typeof result.transcript === 'string') {
                    return result.transcript;
                } else if (result.transcript && result.transcript.content) {
                    return result.transcript.content;
                } else if (result.transcript && result.transcript.text) {
                    return result.transcript.text;
                } else {
                    console.log('‚ö†Ô∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ transcript:', result.transcript);
                    return JSON.stringify(result.transcript);
                }
            });
        
        console.log(`üìù –ù–∞–π–¥–µ–Ω–æ ${transcripts.length} transcript(–æ–≤)`);
        
        return transcripts;
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ transcript:', error.message);
        throw error;
    }
}

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è CommonJS
module.exports = { getTranscriptSummary, getTranscriptsOnly }; 