console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –ø—Ä–æ–µ–∫—Ç–∞...\n');

// –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
const requiredEnvVars = [
  'OPENAI_API_KEY',
  'REACT_APP_OPENAI_API_KEY',
  'REACT_APP_API_URL'
];

console.log('üìã –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è:');
requiredEnvVars.forEach(varName => {
  const value = process.env[varName];
  if (value && value !== 'your-openai-api-key-here') {
    console.log(`‚úÖ ${varName}: ${value.substring(0, 10)}...`);
  } else {
    console.log(`‚ùå ${varName}: –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω`);
  }
});

console.log('\nüåê –ü—Ä–æ–≤–µ—Ä–∫–∞ API URL:');
const apiUrl = process.env.REACT_APP_API_URL || 'http://localhost:3001';
console.log(`API URL: ${apiUrl}`);

if (apiUrl.includes('localhost')) {
  console.log('‚ÑπÔ∏è  –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ª–æ–∫–∞–ª—å–Ω–∞—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞');
} else {
  console.log('üöÄ –ù–∞—Å—Ç—Ä–æ–µ–Ω –¥–ª—è –ø—Ä–æ–¥–∞–∫—à–µ–Ω–∞');
}

console.log('\nüìÅ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∞–π–ª–æ–≤:');
const fs = require('fs');
const path = require('path');

const requiredFiles = [
  '.env',
  'server.js',
  'src/TranscriptSummary.js',
  'transcript-summarizer.cjs'
];

requiredFiles.forEach(file => {
  if (fs.existsSync(path.join(__dirname, file))) {
    console.log(`‚úÖ ${file}`);
  } else {
    console.log(`‚ùå ${file} - –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç`);
  }
});

console.log('\nüéâ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!'); 