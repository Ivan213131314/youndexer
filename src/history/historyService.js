import { collection, addDoc, getDocs, query, orderBy, limit, doc, getDoc, deleteDoc, writeBatch, where, updateDoc } from 'firebase/firestore';
import { db } from '../firebase';

// –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞ –≤ –∏—Å—Ç–æ—Ä–∏—é
export const saveSearchToHistory = async (searchData, userId = null) => {
  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ db –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω
    if (!db) {
      console.error('‚ùå [HISTORY] Firebase db not initialized');
      return null;
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    if (!searchData || !searchData.query) {
      console.error('‚ùå [HISTORY] Invalid search data provided');
      return null;
    }

    // –î–ª—è –Ω–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–µ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Å—Ç–æ—Ä–∏—é
    if (!userId) {
      console.log('‚ÑπÔ∏è [HISTORY] No userId provided, skipping save');
      return null;
    }

    // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –¥–∞–Ω–Ω—ã—Ö –¥–ª—è Firestore (1MB –ª–∏–º–∏—Ç)
    const historyData = {
      query: searchData.query,
      searchResults: searchData.searchResults ? searchData.searchResults.slice(0, 10) : [], // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–æ 10 –≤–∏–¥–µ–æ
      summaryData: searchData.summaryData ? {
        summary: searchData.summaryData.summary,
        totalResults: searchData.summaryData.totalResults || 0,
        transcriptCount: searchData.summaryData.transcriptCount || 0
      } : null,
      timestamp: new Date().toISOString(),
      createdAt: new Date(),
      userId: userId // –î–æ–±–∞–≤–ª—è–µ–º userId
    };

    console.log('üìù [HISTORY] Attempting to save data:', {
      query: historyData.query,
      videosCount: historyData.searchResults.length,
      hasSummary: !!historyData.summaryData,
      userId: userId
    });

    const docRef = await addDoc(collection(db, 'searchHistory'), historyData);
    console.log('‚úÖ [HISTORY] Search saved to history with ID:', docRef.id);
    return docRef.id;
  } catch (error) {
    console.error('‚ùå [HISTORY] Error saving search to history:', error);
    console.error('üîç [HISTORY] Error details:', {
      name: error.name,
      message: error.message,
      code: error.code
    });
    
    // –ù–µ –±—Ä–æ—Å–∞–µ–º –æ—à–∏–±–∫—É, —á—Ç–æ–±—ã –Ω–µ –ª–æ–º–∞—Ç—å –æ—Å–Ω–æ–≤–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª
    return null;
  }
};

// –ü–æ–ª—É—á–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ –ø–æ–∏—Å–∫–∞
export const getSearchHistory = async (limitCount = 20, userId = null) => {
  try {
    // –î–ª—è –Ω–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç—É—é –∏—Å—Ç–æ—Ä–∏—é
    if (!userId) {
      console.log('‚ÑπÔ∏è [HISTORY] No userId provided, returning empty history');
      return [];
    }

    // –°–Ω–∞—á–∞–ª–∞ –ø–æ–ª—É—á–∞–µ–º –≤—Å–µ –∑–∞–ø–∏—Å–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –±–µ–∑ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ (—á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å —Å–æ—Å—Ç–∞–≤–Ω–æ–≥–æ –∏–Ω–¥–µ–∫—Å–∞)
    const q = query(
      collection(db, 'searchHistory'),
      where('userId', '==', userId)
    );
    
    const querySnapshot = await getDocs(q);
    const history = [];
    
    querySnapshot.forEach((doc) => {
      history.push({
        id: doc.id,
        ...doc.data()
      });
    });

    // –°–æ—Ä—Ç–∏—Ä—É–µ–º –≤ JavaScript –ø–æ createdAt
    history.sort((a, b) => {
      const dateA = a.createdAt?.toDate?.() || new Date(a.createdAt) || new Date(0);
      const dateB = b.createdAt?.toDate?.() || new Date(b.createdAt) || new Date(0);
      return dateB - dateA; // –ü–æ —É–±—ã–≤–∞–Ω–∏—é (–Ω–æ–≤—ã–µ —Å–Ω–∞—á–∞–ª–∞)
    });

    // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    const limitedHistory = history.slice(0, limitCount);

    console.log(`‚úÖ [HISTORY] Retrieved ${limitedHistory.length} history items for user ${userId}`);
    return limitedHistory;
  } catch (error) {
    console.error('‚ùå [HISTORY] Error getting search history:', error);
    throw error;
  }
};

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –∑–∞–ø–∏—Å–∏ –≤ –∏—Å—Ç–æ—Ä–∏–∏
export const updateHistoryItem = async (historyId, updateData, userId = null) => {
  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ db –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω
    if (!db) {
      console.error('‚ùå [HISTORY] Firebase db not initialized');
      return false;
    }

    // –î–ª—è –Ω–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–µ –æ–±–Ω–æ–≤–ª—è–µ–º –∏—Å—Ç–æ—Ä–∏—é
    if (!userId) {
      console.log('‚ÑπÔ∏è [HISTORY] No userId provided, skipping update');
      return false;
    }

    if (!historyId) {
      console.error('‚ùå [HISTORY] No historyId provided for update');
      return false;
    }

    // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    const historyUpdateData = {
      ...updateData,
      updatedAt: new Date()
    };

    // –ï—Å–ª–∏ –µ—Å—Ç—å summaryData, –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä
    if (updateData.summaryData) {
      historyUpdateData.summaryData = {
        summary: updateData.summaryData.summary,
        totalResults: updateData.summaryData.totalResults || 0,
        transcriptCount: updateData.summaryData.transcriptCount || 0
      };
    }

    console.log('üìù [HISTORY] Attempting to update history item:', historyId, {
      hasSummary: !!historyUpdateData.summaryData,
      userId: userId
    });

    const docRef = doc(db, 'searchHistory', historyId);
    await updateDoc(docRef, historyUpdateData);
    
    console.log('‚úÖ [HISTORY] History item updated successfully:', historyId);
    return true;
  } catch (error) {
    console.error('‚ùå [HISTORY] Error updating history item:', error);
    console.error('üîç [HISTORY] Error details:', {
      name: error.name,
      message: error.message,
      code: error.code
    });
    return false;
  }
};

// –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –∑–∞–ø–∏—Å–∏ –∏–∑ –∏—Å—Ç–æ—Ä–∏–∏
export const getHistoryItem = async (historyId) => {
  try {
    const docRef = doc(db, 'searchHistory', historyId);
    const docSnap = await getDoc(docRef);
    
    if (docSnap.exists()) {
      console.log('‚úÖ [HISTORY] Retrieved history item:', historyId);
      return {
        id: docSnap.id,
        ...docSnap.data()
      };
    } else {
      console.log('‚ùå [HISTORY] History item not found:', historyId);
      return null;
    }
  } catch (error) {
    console.error('‚ùå [HISTORY] Error getting history item:', error);
    throw error;
  }
};

// –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–µ—Ñ–æ–ª—Ç–Ω–æ–≥–æ —à–∞–±–ª–æ–Ω–∞ –≤ –æ—Ç–¥–µ–ª—å–Ω—É—é –∫–æ–ª–ª–µ–∫—Ü–∏—é
export const saveDefaultTemplate = async (templateData) => {
  try {
    console.log('üìù [TEMPLATE] Saving default template...');
    
    // –£–¥–∞–ª—è–µ–º –ø–æ–ª—è, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ –Ω—É–∂–Ω—ã –≤ —à–∞–±–ª–æ–Ω–µ
    const { id, createdAt, timestamp, userId, isDefault, ...templateOnly } = templateData;
    
    const docRef = await addDoc(collection(db, 'defaultQueryTemplate'), {
      ...templateOnly,
      isTemplate: true,
      createdAt: new Date()
    });
    
    console.log('‚úÖ [TEMPLATE] Default template saved with ID:', docRef.id);
    return docRef.id;
  } catch (error) {
    console.error('‚ùå [TEMPLATE] Error saving default template:', error);
    throw error;
  }
};

// –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–µ—Ñ–æ–ª—Ç–Ω–æ–≥–æ —à–∞–±–ª–æ–Ω–∞
export const getDefaultTemplate = async () => {
  try {
    console.log('üîç [TEMPLATE] Getting default template...');
    
    const q = query(
      collection(db, 'defaultQueryTemplate'),
      where('isTemplate', '==', true),
      limit(1)
    );
    
    const querySnapshot = await getDocs(q);
    
    if (querySnapshot.empty) {
      console.log('‚ùå [TEMPLATE] No default template found');
      return null;
    }

    const template = {
      id: querySnapshot.docs[0].id,
      ...querySnapshot.docs[0].data()
    };

    console.log('‚úÖ [TEMPLATE] Retrieved default template');
    return template;
  } catch (error) {
    console.error('‚ùå [TEMPLATE] Error getting default template:', error);
    throw error;
  }
};

// –°–æ–∑–¥–∞–Ω–∏–µ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–≥–æ –¥–µ—Ñ–æ–ª—Ç–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
export const createUserDefaultQuery = async (userId) => {
  try {
    console.log('üë§ [USER DEFAULT] Creating default query for user:', userId);
    
    // –ü–æ–ª—É—á–∞–µ–º —à–∞–±–ª–æ–Ω
    const template = await getDefaultTemplate();
    if (!template) {
      throw new Error('Default template not found');
    }
    
    // –°–æ–∑–¥–∞–µ–º –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—É—é –∫–æ–ø–∏—é
    const userDefaultQuery = {
      ...template,
      userId: userId,
      isDefault: true,
      createdAt: new Date(),
      timestamp: new Date().toISOString()
    };
    
    // –£–¥–∞–ª—è–µ–º –ø–æ–ª—è —à–∞–±–ª–æ–Ω–∞
    delete userDefaultQuery.isTemplate;
    delete userDefaultQuery.id;
    
    const docRef = await addDoc(collection(db, 'searchHistory'), userDefaultQuery);
    console.log('‚úÖ [USER DEFAULT] Created default query for user with ID:', docRef.id);
    
    return {
      id: docRef.id,
      ...userDefaultQuery
    };
  } catch (error) {
    console.error('‚ùå [USER DEFAULT] Error creating user default query:', error);
    throw error;
  }
};

// –£–¥–∞–ª–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –∏–∑ –∏—Å—Ç–æ—Ä–∏–∏
export const deleteHistoryItem = async (historyId, userId = null) => {
  try {
    // –î–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∑–∞–ø–∏—Å—å –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    if (userId) {
      const historyItem = await getHistoryItem(historyId);
      if (!historyItem || historyItem.userId !== userId) {
        console.error('‚ùå [HISTORY] User not authorized to delete this item');
        throw new Error('Not authorized to delete this item');
      }
    }

    const docRef = doc(db, 'searchHistory', historyId);
    await deleteDoc(docRef);
    console.log('‚úÖ [HISTORY] History item deleted:', historyId);
    return true;
  } catch (error) {
    console.error('‚ùå [HISTORY] Error deleting history item:', error);
    throw error;
  }
};

// –£–¥–∞–ª–µ–Ω–∏–µ –≤—Å–µ–π –∏—Å—Ç–æ—Ä–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–∫—Ä–æ–º–µ –¥–µ—Ñ–æ–ª—Ç–Ω–æ–π)
export const deleteAllHistory = async (userId = null) => {
  try {
    if (!userId) {
      console.log('‚ÑπÔ∏è [HISTORY] No userId provided, skipping delete');
      return 0;
    }

    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∑–∞–ø–∏—Å–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const q = query(
      collection(db, 'searchHistory'),
      where('userId', '==', userId)
    );
    const querySnapshot = await getDocs(q);
    
    if (querySnapshot.empty) {
      console.log('‚úÖ [HISTORY] No history items to delete');
      return 0;
    }

    const batch = writeBatch(db);
    let deletedCount = 0;

    querySnapshot.forEach((doc) => {
      const data = doc.data();
      // –ù–µ —É–¥–∞–ª—è–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã
      if (!data.isDefault) {
        batch.delete(doc.ref);
        deletedCount++;
      }
    });

    if (deletedCount > 0) {
      await batch.commit();
    }
    
    console.log(`‚úÖ [HISTORY] Deleted ${deletedCount} history items for user ${userId}`);
    return deletedCount;
  } catch (error) {
    console.error('‚ùå [HISTORY] Error deleting all history:', error);
    throw error;
  }
};

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–µ—Ñ–æ–ª—Ç–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
export const initializeDefaultQuery = async () => {
  try {
    console.log('üîç [HISTORY] Checking for default query...');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ –¥–µ—Ñ–æ–ª—Ç–Ω—ã–π –∑–∞–ø—Ä–æ—Å
    const q = query(
      collection(db, 'searchHistory'),
      where('isDefault', '==', true)
    );
    
    const querySnapshot = await getDocs(q);
    
    if (!querySnapshot.empty) {
      console.log('‚úÖ [HISTORY] Default query already exists');
      return querySnapshot.docs[0].data();
    }

    // –°–æ–∑–¥–∞–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω—ã–π –∑–∞–ø—Ä–æ—Å
    const defaultQueryData = {
      query: "Most Profitable Businesses to Start in 2025",
      searchResults: [
        {
          id: 1,
          videoId: "dQw4w9WgXcQ",
          title: "The 4 Most Profitable Businesses to Start in 2025",
          description: "Discover the most profitable business opportunities for 2025",
          url: "https://www.youtube.com/watch?v=dQw4w9WgXcQ",
          thumbnail: "https://i.ytimg.com/vi/dQw4w9WgXcQ/hqdefault.jpg",
          author: "Business Insights",
          publishedAt: "2024-01-01T00:00:00Z",
          duration: "PT10M30S",
          views: "1000000",
          transcript: "Welcome to our comprehensive guide on the most profitable businesses to start in 2025. In this video, we'll explore four key business opportunities that show tremendous potential for growth and profitability in the coming year. First, let's discuss the pet care industry which has seen explosive growth. High-end pet services such as luxury pet hotels, premium grooming services, and specialized pet products are showing incredible profit margins. The pet industry is recession-proof as people continue to spend on their beloved animals regardless of economic conditions."
        },
        {
          id: 2,
          videoId: "dQw4w9WgXcR",
          title: "8 High Income Businesses to Start in 2025",
          description: "High-income business ideas for 2025",
          url: "https://www.youtube.com/watch?v=dQw4w9WgXcR",
          thumbnail: "https://i.ytimg.com/vi/dQw4w9WgXcR/hqdefault.jpg",
          author: "Entrepreneur Today",
          publishedAt: "2024-01-15T00:00:00Z",
          duration: "PT15M45S",
          views: "850000",
          transcript: "Starting a business in 2025 requires careful consideration of market trends and consumer demands. Today we'll discuss eight high-income business opportunities that entrepreneurs should consider. The health and wellness sector continues to boom with med spas, telemedicine platforms, and wellness centers showing exceptional growth. Digital services like AI consulting, cybersecurity, and specialized digital marketing are in high demand as businesses adapt to new technologies."
        }
      ],
      summaryData: {
        summary: `**Summary of Most Profitable Businesses to Start in 2025**

### 1. Direct Response to User's Query

For those looking to start a business in 2025, the following are identified as the most profitable business opportunities across various video insights:

- **Pet Care Services**: High-end pet services such as luxury pet hotels and premium pet products.

- **Health and Wellness**: Med spas, telemedicine, and wellness centers targeting high-end clientele.

- **Sustainable and Eco-friendly Products**: Products that merge sustainability with luxury, such as eco-friendly packaging solutions and sustainable fashion.

- **Digital Services**: AI consulting, cybersecurity services, and digital marketing agencies focusing on emerging platforms.

- **Specialized Food Services**: Gourmet meal kits, specialty dietary products, and premium food delivery services.

### 2. Key Insights from Multiple Sources

The most profitable businesses share common characteristics: they solve specific problems, target underserved markets, have high profit margins, and can scale efficiently. Many successful 2025 business models focus on premium services rather than competing on price.

### 3. Actionable Recommendations

Start with thorough market research, ensure adequate funding, focus on customer experience, and consider businesses that can operate both online and offline. The most successful entrepreneurs in 2025 will be those who can adapt quickly to changing market conditions and leverage technology effectively.`,
        totalResults: 2,
        transcriptCount: 2
      },
      timestamp: new Date().toISOString(),
      createdAt: new Date(),
      isDefault: true
    };

    const docRef = await addDoc(collection(db, 'searchHistory'), defaultQueryData);
    console.log('‚úÖ [HISTORY] Default query created with ID:', docRef.id);
    
    return {
      id: docRef.id,
      ...defaultQueryData
    };
  } catch (error) {
    console.error('‚ùå [HISTORY] Error initializing default query:', error);
    throw error;
  }
};

// –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–µ—Ñ–æ–ª—Ç–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
export const getDefaultQuery = async (userId = null) => {
  try {
    console.log('üîç [HISTORY] Getting default query for user:', userId);
    
    // –î–ª—è –Ω–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —à–∞–±–ª–æ–Ω
    if (!userId) {
      console.log('‚ÑπÔ∏è [HISTORY] No userId, returning template');
      return await getDefaultTemplate();
    }
    
    // –ò—â–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω—ã–π –∑–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const q = query(
      collection(db, 'searchHistory'),
      where('userId', '==', userId),
      where('isDefault', '==', true),
      limit(1)
    );
    
    const querySnapshot = await getDocs(q);
    
    if (querySnapshot.empty) {
      console.log('‚ÑπÔ∏è [HISTORY] No default query found for user, creating...');
      return await createUserDefaultQuery(userId);
    }

    const defaultQuery = {
      id: querySnapshot.docs[0].id,
      ...querySnapshot.docs[0].data()
    };

    console.log('‚úÖ [HISTORY] Retrieved default query for user');
    return defaultQuery;
  } catch (error) {
    console.error('‚ùå [HISTORY] Error getting default query:', error);
    throw error;
  }
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –º–∏–≥—Ä–∞—Ü–∏–∏ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –¥–µ—Ñ–æ–ª—Ç–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ –≤ —à–∞–±–ª–æ–Ω
export const migrateDefaultQueryToTemplate = async (historyId = 'G2H4hGy7phlMFa9Cu2e4') => {
  try {
    console.log('üîÑ [MIGRATION] Starting migration of default query to template...');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ —à–∞–±–ª–æ–Ω
    const existingTemplate = await getDefaultTemplate();
    if (existingTemplate) {
      console.log('‚úÖ [MIGRATION] Template already exists, skipping migration');
      return existingTemplate;
    }
    
    // –ü–æ–ª—É—á–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –¥–µ—Ñ–æ–ª—Ç–Ω—ã–π –∑–∞–ø—Ä–æ—Å
    const existingQuery = await getHistoryItem(historyId);
    if (!existingQuery) {
      console.log('‚ö†Ô∏è [MIGRATION] Default query not found, creating from fallback data');
      
      // –°–æ–∑–¥–∞–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω—ã–π —à–∞–±–ª–æ–Ω –∏–∑ —Ä–µ–∑–µ—Ä–≤–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
      const fallbackTemplate = {
        query: "Most Profitable Businesses to Start in 2025",
        searchResults: [
          {
            id: 1,
            videoId: "dQw4w9WgXcQ",
            title: "The 4 Most Profitable Businesses to Start in 2025",
            description: "Discover the most profitable business opportunities for 2025",
            url: "https://www.youtube.com/watch?v=dQw4w9WgXcQ",
            thumbnail: "https://i.ytimg.com/vi/dQw4w9WgXcQ/hqdefault.jpg",
            author: "Business Insights",
            publishedAt: "2024-01-01T00:00:00Z",
            duration: "PT10M30S",
            views: "1000000",
            transcript: "Welcome to our comprehensive guide on the most profitable businesses to start in 2025..."
          },
          {
            id: 2,
            videoId: "dQw4w9WgXcR",
            title: "8 High Income Businesses to Start in 2025",
            description: "High-income business ideas for 2025",
            url: "https://www.youtube.com/watch?v=dQw4w9WgXcR",
            thumbnail: "https://i.ytimg.com/vi/dQw4w9WgXcR/hqdefault.jpg",
            author: "Entrepreneur Today",
            publishedAt: "2024-01-15T00:00:00Z",
            duration: "PT15M45S",
            views: "850000",
            transcript: "Starting a business in 2025 requires careful consideration of market trends..."
          }
        ],
        summaryData: {
          summary: `**Summary of Most Profitable Businesses to Start in 2025**

### 1. Direct Response to User's Query

For those looking to start a business in 2025, the following are identified as the most profitable business opportunities:

- **Pet Care Services**: High-end pet services such as luxury pet hotels and premium pet products.
- **Health and Wellness**: Med spas, telemedicine, and wellness centers targeting high-end clientele.
- **Sustainable and Eco-friendly Products**: Products that merge sustainability with luxury.
- **Digital Services**: AI consulting, cybersecurity services, and digital marketing agencies.
- **Specialized Food Services**: Gourmet meal kits, specialty dietary products, and premium food delivery services.

### 2. Key Insights from Multiple Sources

The most profitable businesses share common characteristics: they solve specific problems, target underserved markets, have high profit margins, and can scale efficiently.

### 3. Actionable Recommendations

Start with thorough market research, ensure adequate funding, focus on customer experience, and consider businesses that can operate both online and offline.`,
          totalResults: 2,
          transcriptCount: 2
        }
      };
      
      const templateId = await saveDefaultTemplate(fallbackTemplate);
      console.log('‚úÖ [MIGRATION] Created fallback template with ID:', templateId);
      return await getDefaultTemplate();
    }
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞–∫ —à–∞–±–ª–æ–Ω
    const templateId = await saveDefaultTemplate(existingQuery);
    console.log('‚úÖ [MIGRATION] Successfully migrated default query to template');
    
    return await getDefaultTemplate();
  } catch (error) {
    console.error('‚ùå [MIGRATION] Error migrating default query to template:', error);
    throw error;
  }
};