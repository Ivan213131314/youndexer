import React, { useState } from 'react';
import './TranscriptSummary.css';

const TranscriptSummary = ({ videos, userQuery, onSummaryComplete }) => {
  const [isLoading, setIsLoading] = useState(false);
  const [error, setError] = useState(null);

  const createSummary = async () => {
    if (!videos || videos.length === 0 || !userQuery) {
      setError('–ù–µ–æ–±—Ö–æ–¥–∏–º—ã –≤–∏–¥–µ–æ –∏ userQuery –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ä–µ–∑—é–º–µ');
      return;
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –µ—Å—Ç—å –≤–∏–¥–µ–æ —Å transcript–∞–º–∏
    const videosWithTranscripts = videos.filter(video => video.transcript);
    if (videosWithTranscripts.length === 0) {
      setError('–ù–µ—Ç –≤–∏–¥–µ–æ —Å transcript–∞–º–∏ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ä–µ–∑—é–º–µ');
      return;
    }

    setIsLoading(true);
    setError(null);

    try {
      console.log('üöÄ [SUMMARY] –°–æ–∑–¥–∞–µ–º —Ä–µ–∑—é–º–µ...');
      console.log(`üìã [SUMMARY] –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–∏–¥–µ–æ: ${videos.length}`);
      console.log(`üìù [SUMMARY] –í–∏–¥–µ–æ —Å transcript–∞–º–∏: ${videosWithTranscripts.length}`);
      console.log(`üîç [SUMMARY] –ó–∞–ø—Ä–æ—Å: "${userQuery}"`);

      const requestBody = {
        videos: videosWithTranscripts,
        userQuery
      };

      console.log('üì§ [SUMMARY] –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ —Å–µ—Ä–≤–µ—Ä—É:');
      console.log('='.repeat(80));
      console.log('URL:', `${process.env.REACT_APP_API_URL || 'http://localhost:3001'}/api/summarize-videos`);
      console.log('Method: POST');
      console.log('Headers:', {
        'Content-Type': 'application/json'
      });
      console.log('Body:', JSON.stringify({
        ...requestBody,
        videos: requestBody.videos.map(v => ({ ...v, transcript: v.transcript ? `${v.transcript.substring(0, 100)}...` : null }))
      }, null, 2));
      console.log('='.repeat(80));

      const response = await fetch(`${process.env.REACT_APP_API_URL || 'http://localhost:3001'}/api/summarize-videos`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(requestBody)
      });

      if (!response.ok) {
        const errorData = await response.json();
        throw new Error(errorData.error || '–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ä–µ–∑—é–º–µ');
      }

      const result = await response.json();
      
      console.log('‚úÖ [SUMMARY] –†–µ–∑—é–º–µ —Å–æ–∑–¥–∞–Ω–æ —É—Å–ø–µ—à–Ω–æ!');
      console.log('üì• [SUMMARY] –û—Ç–≤–µ—Ç –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞:');
      console.log('='.repeat(80));
      console.log('Status:', response.status, response.statusText);
      console.log('Response:', JSON.stringify(result, null, 2));
      console.log('='.repeat(80));
      console.log('üìä [SUMMARY] –†–µ–∑—É–ª—å—Ç–∞—Ç—ã:', result);
      
      if (onSummaryComplete) {
        onSummaryComplete(result);
      }

    } catch (error) {
      console.error('‚ùå [SUMMARY] –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ä–µ–∑—é–º–µ:', error);
      setError(error.message);
    } finally {
      setIsLoading(false);
    }
  };

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ –≤–∏–¥–µ–æ —Å transcript–∞–º–∏
  const videosWithTranscripts = videos ? videos.filter(video => video.transcript) : [];
  const hasTranscripts = videosWithTranscripts.length > 0;

  return (
    <div className="transcript-summary">
      <div className="summary-header">
        <h3>üìù –°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∑—é–º–µ</h3>
        <div className="summary-stats">
          <span>–í—Å–µ–≥–æ –≤–∏–¥–µ–æ: {videos ? videos.length : 0}</span>
          <span>–° transcript–∞–º–∏: {videosWithTranscripts.length}</span>
        </div>
        <button 
          className="summary-button"
          onClick={createSummary}
          disabled={isLoading || !hasTranscripts || !userQuery}
        >
          {isLoading ? '–°–æ–∑–¥–∞–µ–º —Ä–µ–∑—é–º–µ...' : '–°–æ–∑–¥–∞—Ç—å —Ä–µ–∑—é–º–µ'}
        </button>
      </div>

      {error && (
        <div className="summary-error">
          <span className="error-icon">‚ùå</span>
          <span className="error-text">{error}</span>
        </div>
      )}

      {!hasTranscripts && videos && videos.length > 0 && (
        <div className="summary-warning">
          <span className="warning-icon">‚ö†Ô∏è</span>
          <span className="warning-text">–ù–µ—Ç –≤–∏–¥–µ–æ —Å transcript–∞–º–∏ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ä–µ–∑—é–º–µ</span>
        </div>
      )}

      {isLoading && (
        <div className="summary-loading">
          <div className="loading-spinner"></div>
          <span>–°–æ–∑–¥–∞–µ–º —Ä–µ–∑—é–º–µ –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤—Å–µ—Ö —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç–æ–≤...</span>
        </div>
      )}
    </div>
  );
};

export default TranscriptSummary; 