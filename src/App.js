import React, { useState, useEffect, useCallback } from 'react';
import { fetchVideosByPhrase, searchVideosWithPhrases, addTranscriptsToVideos } from './ytSearchModule';
import { filterVideosWithGPT, getFilteredVideos } from './videoFilter';
import TranscriptSummary from './TranscriptSummary';
import History from './history/History';
import AboutUs from './AboutUs';
import Navigation from './components/Navigation';
import SearchProgress from './components/SearchProgress';
import Paywall from './components/Paywall';
import RequestLimitModal from './components/RequestLimitModal';
import AuthModal from './auth/AuthModal';
import { canMakeRequest, incrementRequestCount, getRemainingRequests, getUsedRequestsToday, resetRequestCount } from './utils/requestLimiter';
import { consumeToken, canUseToken } from './utils/tokenService';

import VideoItem from './components/VideoItem';
import DefaultQuery from './components/DefaultQuery';
import ThumbnailImage from './components/ThumbnailImage';

import TokenLimitModal from './components/TokenLimitModal';
import { collection, addDoc } from 'firebase/firestore';
import { db } from './firebase';
import { saveSearchToHistory, updateHistoryItem } from './history/historyService';
import { AuthProvider, useAuth } from './auth/AuthContext';
import { parseChannel, validateChannelUrl } from './channel-parsing/channelService';
import './App.css';

const videoSearchCountPerRequest = 20;

function AppContent() {
  const { user, userTokens, setUserTokens } = useAuth(); // –î–æ–±–∞–≤–ª—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é –∏ —Ç–æ–∫–µ–Ω—ã
  const [currentPage, setCurrentPage] = useState('main');
  const [selectedHistoryId, setSelectedHistoryId] = useState(null);
  const [query, setQuery] = useState('');
  const [searchResults, setSearchResults] = useState([]);
  const [isLoading, setIsLoading] = useState(false);
  const [error, setError] = useState(null);
  const [summaryData, setSummaryData] = useState(null);
  const [searchMode, setSearchMode] = useState('request');
  const [channelUrl, setChannelUrl] = useState('');
  const [channelError, setChannelError] = useState(null);
  const [selectedModel, setSelectedModel] = useState('tngtech/deepseek-r1t2-chimera:free');
  const [leftColumnWidth, setLeftColumnWidth] = useState(70);
  const [parsingLeftColumnWidth, setParsingLeftColumnWidth] = useState(70); // 70% –¥–ª—è –ª–µ–≤–æ–π –∫–æ–ª–æ–Ω–∫–∏, 30% –¥–ª—è –ø—Ä–∞–≤–æ–π
  const [isResizing, setIsResizing] = useState(false);
  const [isLoadingVideos, setIsLoadingVideos] = useState(false);
  const [selectedVideoCount, setSelectedVideoCount] = useState(10);
  const [channelSummaryData, setChannelSummaryData] = useState(null);
  const [isLoadingDefault, setIsLoadingDefault] = useState(false);
  const [parsingResults, setParsingResults] = useState(null);
  const [channelVideosResults, setChannelVideosResults] = useState(null);
  const [currentParsingHistoryId, setCurrentParsingHistoryId] = useState(null);
  const [proModel, setProModel] = useState(false);
  const [detailedSummary, setDetailedSummary] = useState(false);
  const [searchProgress, setSearchProgress] = useState(null);
  const [progressDetails, setProgressDetails] = useState('');
  const [summaryProgress, setSummaryProgress] = useState(0);
  const [showPaywall, setShowPaywall] = useState(false);
  const [showRequestLimit, setShowRequestLimit] = useState(false);
  const [showAuthModal, setShowAuthModal] = useState(false);
  const [authModalMode, setAuthModalMode] = useState('login');
  const [showTokenLimit, setShowTokenLimit] = useState(false);
  const [requestCount, setRequestCount] = useState(getUsedRequestsToday());

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è Paywall
  const handleSubscribe = async (planId) => {
    console.log('–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –ø–ª–∞–Ω:', planId);
    // –ó–¥–µ—Å—å –±—É–¥–µ—Ç –ª–æ–≥–∏–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏
    setShowPaywall(false);
  };

  const handleClosePaywall = () => {
    setShowPaywall(false);
  };

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è RequestLimitModal
  const handleCloseRequestLimit = () => {
    setShowRequestLimit(false);
  };

  const handleUpgradeFromLimit = () => {
    setShowRequestLimit(false);
    setShowPaywall(true);
  };

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è TokenLimitModal
  const handleCloseTokenLimit = () => {
    setShowTokenLimit(false);
  };

  const handleUpgradeFromTokenLimit = () => {
    setShowTokenLimit(false);
    setShowPaywall(true);
  };

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è AuthModal
  const handleCloseAuthModal = () => {
    setShowAuthModal(false);
  };

  const showLoginModal = () => {
    setAuthModalMode('login');
    setShowAuthModal(true);
  };

  // –≠—Ñ—Ñ–µ–∫—Ç –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –º–æ–¥–µ–ª–∏ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ proModel
  useEffect(() => {
    if (proModel) {
      setSelectedModel('google/gemini-2.0-flash-lite-001');
    } else {
      setSelectedModel('tngtech/deepseek-r1t2-chimera:free');
    }
  }, [proModel]);

  // –≠—Ñ—Ñ–µ–∫—Ç –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—á–µ—Ç—á–∏–∫–∞ –∑–∞–ø—Ä–æ—Å–æ–≤ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –¥–∞—Ç—ã
  useEffect(() => {
    const updateRequestCount = () => {
      setRequestCount(getUsedRequestsToday());
    };

    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
    updateRequestCount();

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞–∂–¥—ã–π —á–∞—Å (–Ω–∞ —Å–ª—É—á–∞–π —Å–º–µ–Ω—ã –¥–∞—Ç—ã)
    const interval = setInterval(updateRequestCount, 60 * 60 * 1000);

    return () => clearInterval(interval);
  }, []);





  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è videoId –∏–∑ YouTube URL
  const extractVideoId = (url) => {
    const patterns = [
      /(?:youtube\.com\/watch\?v=|youtu\.be\/|youtube\.com\/embed\/)([^&\n?#]+)/,
      /youtube\.com\/v\/([^&\n?#]+)/,
      /youtube\.com\/watch\?.*v=([^&\n?#]+)/
    ];

    for (const pattern of patterns) {
      const match = url.match(pattern);
      if (match) {
        return match[1];
      }
    }
    return null;
  };

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≤–∏–¥–µ–æ
  const fetchVideoInfo = async (videoId) => {
    const YOUTUBE_API_KEY = 'AIzaSyCs3QZxVnZBltP2tn2_v8IkbK0_03zoaTU';
    const url = `https://www.googleapis.com/youtube/v3/videos?key=${YOUTUBE_API_KEY}&part=snippet,contentDetails,statistics&id=${videoId}`;
    
    const response = await fetch(url);
    if (!response.ok) {
      throw new Error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≤–∏–¥–µ–æ');
    }
    
    const data = await response.json();
    if (!data.items || data.items.length === 0) {
      throw new Error('–í–∏–¥–µ–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ');
    }
    
    const videoData = data.items[0];
    return {
      id: videoId,
      videoId: videoId,
      title: videoData.snippet.title,
      description: videoData.snippet.description,
      url: `https://www.youtube.com/watch?v=${videoId}`,
      thumbnail: videoData.snippet.thumbnails?.high?.url || videoData.snippet.thumbnails?.default?.url || '',
      author: videoData.snippet.channelTitle,
      publishedAt: videoData.snippet.publishedAt,
      duration: videoData.contentDetails.duration,
      views: videoData.statistics?.viewCount || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ',
      transcript: null
    };
  };

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏
  const fetchTranscript = async (videoId) => {
    try {
      const apiUrl = process.env.NODE_ENV === 'production' 
        ? '/api/transcript'
        : `${process.env.REACT_APP_API_URL || 'http://localhost:3001'}/api/transcript`;
      const response = await fetch(apiUrl, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({ videoId })
      });

      if (!response.ok) {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø –∫–æ–Ω—Ç–µ–Ω—Ç–∞
        const contentType = response.headers.get('content-type');
        if (contentType && contentType.includes('text/html')) {
          throw new Error('–°–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –∏–ª–∏ —ç–Ω–¥–ø–æ–∏–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω');
        }
        
        try {
          const errorData = await response.json();
          throw new Error(errorData.error || '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏');
        } catch (jsonError) {
          throw new Error(`–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: ${response.status} ${response.statusText}`);
        }
      }

      const data = await response.json();
      
      if (data.success && data.transcript) {
        // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—é –≤ —Å—Ç—Ä–æ–∫—É –µ—Å–ª–∏ –æ–Ω–∞ –ø—Ä–∏—à–ª–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –º–∞—Å—Å–∏–≤–∞
        if (Array.isArray(data.transcript)) {
          return data.transcript.map(item => item.text).join(' ');
        } else if (typeof data.transcript === 'string') {
          return data.transcript;
        } else {
          return JSON.stringify(data.transcript);
        }
      } else {
        throw new Error(data.error || '–¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞');
      }
    } catch (error) {
      if (error.name === 'TypeError' && error.message.includes('fetch')) {
        throw new Error('–°–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É 3001');
      }
      throw error;
    }
  };

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –¥–µ—Ñ–æ–ª—Ç–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
  const handleLoadDefaultQuery = useCallback(async (defaultQueryData) => {
    try {
      setIsLoadingDefault(true);
      console.log('üîÑ [APP] Loading default query data:', defaultQueryData);

      // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–ø—Ä–æ—Å –∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏–∑ –∏—Å—Ç–æ—Ä–∏–∏
      setQuery(defaultQueryData.query);
      setSearchResults(defaultQueryData.searchResults || []);
      setSummaryData(defaultQueryData.summaryData || null);

      console.log('‚úÖ [APP] Default query loaded successfully');
    } catch (error) {
      console.error('‚ùå [APP] Error loading default query:', error);
    } finally {
      setIsLoadingDefault(false);
    }
  }, []);

  const handleSearch = async () => {
    if (!query.trim()) {
      console.log('‚ùå [APP] Empty query provided');
      return;
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
    if (!user) {
      console.log('‚ùå [APP] User not authenticated');
      showLoginModal();
      return;
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–∫–µ–Ω–æ–≤
    const canUseTokens = await canUseToken(user.uid);
    if (!canUseTokens) {
      console.log('‚ùå [APP] No tokens available');
      setShowTokenLimit(true);
      return;
    }

    // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–∫–µ–Ω
    const tokenUsed = await consumeToken(user.uid);
    if (!tokenUsed) {
      console.log('‚ùå [APP] Failed to use token');
      setShowTokenLimit(true);
      return;
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–∫–µ–Ω—ã –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ
    if (userTokens) {
      setUserTokens({
        ...userTokens,
        tokens: userTokens.subscription === 'lifetime' ? userTokens.tokens : userTokens.tokens - 1,
        totalTokensUsed: userTokens.totalTokensUsed + 1
      });
    }
    
    console.log(`\nüöÄ [APP] Starting search process for query: "${query}"`);
    setIsLoading(true);
    setSearchResults(null);
    setSummaryData(null);
    setSearchProgress('searching');
    setProgressDetails('–ü–æ–∏—Å–∫ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã—Ö –≤–∏–¥–µ–æ...');
    setSummaryProgress(0);
    
    // –ê–Ω–∏–º–∞—Ü–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞
    const searchProgressInterval = setInterval(() => {
      setSummaryProgress(prev => {
        if (prev >= 25) {
          clearInterval(searchProgressInterval);
          return 25;
        }
        return prev + 5;
      });
    }, 100);
    
    let searchCompleted = false;
    
    try {
      // –û–±—ã—á–Ω—ã–π –ø–æ–∏—Å–∫ –ø–æ –∑–∞–ø—Ä–æ—Å—É
      console.log(`\nüîç [APP] Regular search for query: "${query}"`);
      setProgressDetails(`–ù–∞–π–¥–µ–Ω–æ ${videoSearchCountPerRequest} –≤–∏–¥–µ–æ, –ø—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—å...`);
      let allVideos = await searchVideosWithPhrases([query], videoSearchCountPerRequest);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—É—á–∏–ª–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
      if (!allVideos || allVideos.length === 0) {
        console.log(`‚ùå [APP] No videos found for query, retrying...`);
        
        // –ü–æ–≤—Ç–æ—Ä—è–µ–º –∑–∞–ø—Ä–æ—Å –µ—â–µ —Ä–∞–∑
        const retryVideos = await searchVideosWithPhrases([query], videoSearchCountPerRequest);
        
        if (!retryVideos || retryVideos.length === 0) {
          console.log(`‚ùå [APP] Still no videos found after retry`);
          setSearchProgress(null);
          setProgressDetails('');
          setSummaryProgress(0);
          return;
        }
        
        console.log(`‚úÖ [APP] Found ${retryVideos.length} videos on retry`);
        allVideos = retryVideos;
      }
        
        console.log(`\nüéâ [APP] Search Results:`);
        console.log(`- Total unique videos found: ${allVideos.length}`);
        console.log(`- All videos:`, allVideos);
        
        // Show duplicate analysis
        console.log(`\nüîÑ [APP] Duplicate Analysis:`);
        const duplicateStats = {};
        allVideos.forEach(video => {
          const count = video.duplicateCount || 1;
          duplicateStats[count] = (duplicateStats[count] || 0) + 1;
        });
        
        Object.entries(duplicateStats).forEach(([count, videos]) => {
          console.log(`   - ${videos} videos appear ${count} time(s)`);
        });
        
                     // Show videos with duplicates
             const videosWithDuplicates = allVideos.filter(video => (video.duplicateCount || 1) > 1);
             if (videosWithDuplicates.length > 0) {
               console.log(`\nüì∫ [APP] Videos that appear multiple times:`);
               videosWithDuplicates.forEach(video => {
                 console.log(`   - "${video.title}" appears ${video.duplicateCount} times`);
               });
             }

             // Step 2: Filter videos with GPT (–≤—Å–µ–≥–¥–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º GPT –º–æ–¥–µ–ª—å)
             console.log(`\nü§ñ [APP] Starting GPT filtering...`);
             setSearchProgress('filtering');
             setProgressDetails(`–§–∏–ª—å—Ç—Ä–∞—Ü–∏—è ${allVideos.length} –≤–∏–¥–µ–æ —Å –ø–æ–º–æ—â—å—é GPT...`);
             setSummaryProgress(25);
             
             // –ê–Ω–∏–º–∞—Ü–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
             const filterProgressInterval = setInterval(() => {
               setSummaryProgress(prev => {
                 if (prev >= 50) {
                   clearInterval(filterProgressInterval);
                   return 50;
                 }
                 return prev + 5;
               });
             }, 150);
             const relevantIds = await filterVideosWithGPT(allVideos, query, 'openai/gpt-4o');
             
             if (relevantIds.length > 0) {
               const filteredVideos = getFilteredVideos(allVideos, relevantIds);
               console.log(`\nüéØ [APP] GPT Filtering Results:`);
               console.log(`- Original videos: ${allVideos.length}`);
               console.log(`- Filtered videos: ${filteredVideos.length}`);
               console.log(`- Filtered video details:`, filteredVideos);
               
               // Step 3: Get transcripts for filtered videos
               console.log(`\nüìù [APP] Getting transcripts for ${filteredVideos.length} filtered videos...`);
               setSearchProgress('transcribing');
               setProgressDetails(`–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ –ø–æ–ª—É—á–µ–Ω–∏—é —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–π –¥–ª—è ${filteredVideos.length} –≤–∏–¥–µ–æ...`);
               setSummaryProgress(50);
               
               // –ê–Ω–∏–º–∞—Ü–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –¥–ª—è —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–π
               const transcribeProgressInterval = setInterval(() => {
                 setSummaryProgress(prev => {
                   if (prev >= 75) {
                     clearInterval(transcribeProgressInterval);
                     return 75;
                   }
                   return prev + 3;
                 });
               }, 200);
               
               // –°–Ω–∞—á–∞–ª–∞ –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º –≤–∏–¥–µ–æ –±–µ–∑ transcript–æ–≤
               setSearchResults(filteredVideos.map(video => ({
                 ...video,
                 transcript: null,
                 // –£–±–µ–∂–¥–∞–µ–º—Å—è —á—Ç–æ –µ—Å—Ç—å –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–æ–ª—è
                 thumbnail: video.thumbnail || `https://img.youtube.com/vi/${video.videoId}/default.jpg`,
                 url: video.url || `https://www.youtube.com/watch?v=${video.videoId}`,
                 author: video.author || video.channelTitle || 'Unknown Channel',
                 duration: video.duration || 'N/A',
                 views: video.views || 'N/A',
                 publishedAt: video.publishedAt || 'N/A'
               })));
               
               // –ó–∞—Ç–µ–º –ø–æ–ª—É—á–∞–µ–º transcript—ã –∏–Ω–∫—Ä–µ–º–µ–Ω—Ç–∞–ª—å–Ω–æ
               const videosWithTranscripts = await addTranscriptsToVideos(filteredVideos, (updatedVideos) => {
                 // Callback –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–∞–∂–¥–æ–≥–æ transcript
                 setSearchResults(updatedVideos);
               }, (stepProgress) => {
                 // Callback –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ —à–∞–≥–∞
                 setProgressDetails(stepProgress.details);
               });
               
               console.log(`\nüìä [APP] Final Results with Transcripts:`);
               console.log(`- Videos with transcripts: ${videosWithTranscripts.filter(v => v.transcript).length}`);
               console.log(`- Videos without transcripts: ${videosWithTranscripts.filter(v => !v.transcript).length}`);
               console.log(`\nüé¨ [APP] Complete video objects with transcripts:`, videosWithTranscripts);
               
               // –§–∏–Ω–∞–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
               setSearchResults(videosWithTranscripts);
               
               // Step 4: Show summarizing step (—Ä–µ–∑—é–º–µ —Å–æ–∑–¥–∞–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤ TranscriptSummary)
               setSearchProgress('summarizing');
               setProgressDetails(`–°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∑—é–º–µ –Ω–∞ –æ—Å–Ω–æ–≤–µ ${videosWithTranscripts.filter(v => v.transcript).length} —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–π...`);
               setSummaryProgress(75);
               
               // –ù–ï –¥–µ–ª–∞–µ–º –∞–Ω–∏–º–∞—Ü–∏—é –∑–¥–µ—Å—å - –ø—Ä–æ–≥—Ä–µ—Å—Å –±—É–¥–µ—Ç –æ–±–Ω–æ–≤–ª—è—Ç—å—Å—è —á–µ—Ä–µ–∑ callback –∏–∑ TranscriptSummary
             } else {
               console.log(`\n‚ö†Ô∏è [APP] GPT filtering failed or returned no results`);
               setSearchProgress(null);
               setProgressDetails('');
               setSummaryProgress(0);
               searchCompleted = true;
             }
      
    } catch (error) {
      console.error('‚ùå [APP] Error in search process:', error);
      console.error('üîç [APP] Error details:', {
        name: error.name,
        message: error.message,
        stack: error.stack
      });
      setSearchProgress(null);
      setProgressDetails('');
    } finally {
      console.log(`\nüèÅ [APP] Search process completed`);
      setIsLoading(false);
      
      // –°—á–µ—Ç—á–∏–∫ —É–∂–µ –±—ã–ª —É–≤–µ–ª–∏—á–µ–Ω –≤ –Ω–∞—á–∞–ª–µ —Ñ—É–Ω–∫—Ü–∏–∏
      
      // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –µ—Å–ª–∏ –æ–Ω –µ—â–µ –Ω–µ –±—ã–ª —Å–±—Ä–æ—à–µ–Ω (–Ω–∞–ø—Ä–∏–º–µ—Ä, –ø—Ä–∏ –æ—à–∏–±–∫–∞—Ö –∏–ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤)
      if (searchProgress !== null) {
        setSearchProgress(null);
        setProgressDetails('');
        setSummaryProgress(0);
        console.log('üîÑ [APP] Progress reset in finally block');
      }
    }
  };

  const handleKeyPress = (e) => {
    if (e.key === 'Enter') {
      handleSearch();
    }
  };

  const handleSummaryComplete = async (summaryResult) => {
    console.log('üéâ [APP] Summary completed:', summaryResult);
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–µ–∂–∏–º–∞
    if (searchMode === 'request') {
      setSummaryData(summaryResult);
      
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ –∏—Å—Ç–æ—Ä–∏—é
      try {
        const searchData = {
          query: query,
          searchResults: searchResults,
          summaryData: summaryResult
        };
        
        const historyId = await saveSearchToHistory(searchData, user?.uid);
        if (historyId) {
          console.log('‚úÖ [APP] Search saved to history with ID:', historyId);
        } else {
          console.log('‚ö†Ô∏è [APP] Failed to save to history, but continuing...');
        }
      } catch (error) {
        console.error('‚ùå [APP] Error saving to history:', error);
      }
    } else {
      // –†–µ–∂–∏–º –ø–∞—Ä—Å–∏–Ω–≥–∞ –≤–∏–¥–µ–æ –∏–ª–∏ –∫–∞–Ω–∞–ª–æ–≤
      setChannelSummaryData(summaryResult);
    }
    
    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å-–∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Å–æ–∑–¥–∞–Ω–∏—è —Ä–µ–∑—é–º–µ
    setSearchProgress(null);
    setProgressDetails('');
    setSummaryProgress(0);
  };

  const handleMouseDown = (e) => {
    setIsResizing(true);
    e.preventDefault();
  };

  const handleParsingMouseDown = (e) => {
    setIsResizing(true);
    e.preventDefault();
  };

  const handleMouseMove = (e) => {
    if (!isResizing) return;
    
    const container = e.currentTarget;
    const rect = container.getBoundingClientRect();
    const x = e.clientX - rect.left;
    const width = rect.width;
    const percentage = (x / width) * 100;
    
    // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —à–∏—Ä–∏–Ω—É –æ—Ç 30% –¥–æ 70% –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è "–ø–ª—ã–≤—É—â–∏—Ö" —ç–ª–µ–º–µ–Ω—Ç–æ–≤
    const clampedPercentage = Math.max(30, Math.min(70, percentage));
    
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –≤ –∫–∞–∫–æ–º —Ä–µ–∂–∏–º–µ –º—ã –Ω–∞—Ö–æ–¥–∏–º—Å—è –∏ –æ–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    if (searchMode === 'request') {
      setLeftColumnWidth(clampedPercentage);
    } else {
      setParsingLeftColumnWidth(clampedPercentage);
    }
  };

  const handleMouseUp = () => {
    setIsResizing(false);
  };

  // –§—É–Ω–∫—Ü–∏–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ —Ç–µ–ø–µ—Ä—å –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç—Å—è —á–µ—Ä–µ–∑ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç Navigation

  // –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ –≤–∏–¥–µ–æ –∏–ª–∏ –∫–∞–Ω–∞–ª–æ–≤
  const handleVideoOrChannelParse = async () => {
    if (!channelUrl.trim()) {
      setChannelError('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –≤–∏–¥–µ–æ –∏–ª–∏ –∫–∞–Ω–∞–ª');
      return;
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
    if (!user) {
      console.log('‚ùå [PARSING] User not authenticated');
      showLoginModal();
      return;
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–∫–µ–Ω–æ–≤
    const canUseTokens = await canUseToken(user.uid);
    if (!canUseTokens) {
      console.log('‚ùå [PARSING] No tokens available');
      setShowTokenLimit(true);
      return;
    }

    // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–∫–µ–Ω
    const tokenUsed = await consumeToken(user.uid);
    if (!tokenUsed) {
      console.log('‚ùå [PARSING] Failed to use token');
      setShowTokenLimit(true);
      return;
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–∫–µ–Ω—ã –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ
    if (userTokens) {
      setUserTokens({
        ...userTokens,
        tokens: userTokens.subscription === 'lifetime' ? userTokens.tokens : userTokens.tokens - 1,
        totalTokensUsed: userTokens.totalTokensUsed + 1
      });
    }
    
    console.log(`\nüöÄ [PARSING] Starting parsing for URL: "${channelUrl}"`);
    setIsLoading(true);
    setParsingResults(null);
    setChannelError(null);
    setChannelSummaryData(null); // –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Ä–µ–∑—é–º–µ
    setCurrentParsingHistoryId(null); // –°–±—Ä–∞—Å—ã–≤–∞–µ–º ID –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –ø–∞—Ä—Å–∏–Ω–≥–∞
    setSearchProgress('searching');
    setProgressDetails('–ê–Ω–∞–ª–∏–∑ —Å—Å—ã–ª–∫–∏...');
    
    let parsingCompleted = false;
    
    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –∑–∞–ø—Ä–æ—Å YouTube URL –≤–∏–¥–µ–æ
      const videoId = extractVideoId(channelUrl);
      
      if (videoId) {
        // –≠—Ç–æ YouTube URL –≤–∏–¥–µ–æ - –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∫ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–µ –≤–∏–¥–µ–æ
        console.log(`\nüéØ [PARSING] YouTube video URL detected, video ID: ${videoId}`);
        
        // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–∏–¥–µ–æ
        setProgressDetails('–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≤–∏–¥–µ–æ...');
        const videoInfo = await fetchVideoInfo(videoId);
        console.log('‚úÖ [PARSING] Video info obtained:', videoInfo);
        
        // –ü–æ–ª—É—á–∞–µ–º —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—é
        console.log('üìù [PARSING] Getting transcript...');
        setSearchProgress('transcribing');
        setProgressDetails('–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏ –≤–∏–¥–µ–æ...');
        let transcript = null;
        
        try {
          transcript = await fetchTranscript(videoId);
          console.log('‚úÖ [PARSING] Transcript obtained');
        } catch (transcriptError) {
          console.warn('‚ö†Ô∏è [PARSING] Could not get transcript:', transcriptError.message);
          // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤–∏–¥–µ–æ –±–µ–∑ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏
        }
        
        const videoWithTranscript = {
          ...videoInfo,
          transcript: transcript
        };
        
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∫–∞–∫ –¥–ª—è –æ—Ç–¥–µ–ª—å–Ω–æ–≥–æ –≤–∏–¥–µ–æ
        setChannelVideosResults({
          videos: [videoWithTranscript],
          totalCount: 1
        });
        
        // –°–æ–∑–¥–∞–µ–º —Ñ–∏–∫—Ç–∏–≤–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–∞—Ä—Å–∏–Ω–≥–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        setParsingResults({
          channelName: videoInfo.author,
          videoCount: 1,
          subscriberCount: null,
          description: null
        });
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–∞—Ä—Å–∏–Ω–≥–∞ –≤–∏–¥–µ–æ –≤ –∏—Å—Ç–æ—Ä–∏—é
        setSearchProgress('summarizing');
        setProgressDetails('–°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∑—é–º–µ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏...');
        setSummaryProgress(0);
        
        // –ê–Ω–∏–º–∞—Ü–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ä–µ–∑—é–º–µ
        const progressInterval = setInterval(() => {
          setSummaryProgress(prev => {
            if (prev >= 90) {
              clearInterval(progressInterval);
              return 90;
            }
            return prev + 10;
          });
        }, 200);
        
        // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ —á—Ç–æ–±—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–≤–∏–¥–µ–ª —à–∞–≥ —Å–æ–∑–¥–∞–Ω–∏—è —Ä–µ–∑—é–º–µ
        setTimeout(async () => {
          setSummaryProgress(100);
          setTimeout(async () => {
            parsingCompleted = true;
            await saveParsingToHistory([videoWithTranscript], true);
            // –£–±–∏—Ä–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –ø–æ—Å–ª–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –∏—Å—Ç–æ—Ä–∏—é
            setSearchProgress(null);
            setProgressDetails('');
            setSummaryProgress(0);
          }, 500);
        }, 2000);
        
        return;
      }
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ —Å—Å—ã–ª–∫–æ–π –Ω–∞ –∫–∞–Ω–∞–ª
      if (!validateChannelUrl(channelUrl)) {
        setChannelError('–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å—Å—ã–ª–∫–∏ –Ω–∞ YouTube –≤–∏–¥–µ–æ –∏–ª–∏ –∫–∞–Ω–∞–ª');
        setSearchProgress(null);
        setProgressDetails('');
        return;
      }
      
      // –≠—Ç–æ –∫–∞–Ω–∞–ª - –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –ª–æ–≥–∏–∫—É –ø–∞—Ä—Å–∏–Ω–≥–∞ –∫–∞–Ω–∞–ª–æ–≤
      console.log(`\nüì∫ [PARSING] Channel URL detected, starting channel parsing`);
      setSearchProgress('filtering');
      setProgressDetails('–ü–∞—Ä—Å–∏–Ω–≥ –∫–∞–Ω–∞–ª–∞...');
      const results = await parseChannel(channelUrl);
      setParsingResults(results);
      // –û—á–∏—â–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤–∏–¥–µ–æ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ –∫–∞–Ω–∞–ª–∞
      setChannelVideosResults(null);
      setChannelSummaryData(null);
      
      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø–∞—Ä—Å–∏–Ω–≥–∞ –∫–∞–Ω–∞–ª–∞
      setSearchProgress('ready');
      setProgressDetails(`–ì–æ—Ç–æ–≤–æ! –ö–∞–Ω–∞–ª "${results.channelName}" –æ–±—Ä–∞–±–æ—Ç–∞–Ω`);
      setSummaryProgress(100);
      
      // –£–±–∏—Ä–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä —á–µ—Ä–µ–∑ 2 —Å–µ–∫—É–Ω–¥—ã
      setTimeout(() => {
        setSearchProgress(null);
        setProgressDetails('');
        setSummaryProgress(0);
      }, 2000);
      
      parsingCompleted = true;
      console.log(`‚úÖ [PARSING] Channel parsed successfully:`, results);
      
    } catch (error) {
      console.error('‚ùå [PARSING] Error in parsing:', error);
      setChannelError('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å—Å—ã–ª–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.');
      setSearchProgress(null);
      setProgressDetails('');
      parsingCompleted = true;
    } finally {
      console.log(`\nüèÅ [PARSING] Parsing completed`);
      setIsLoading(false);
      // –ù–ï —Å–±—Ä–∞—Å—ã–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –∑–¥–µ—Å—å - –æ–Ω –±—É–¥–µ—Ç —Å–±—Ä–æ—à–µ–Ω –≤ setTimeout –≤—ã—à–µ
    }
  };

  const handleGetVideos = async () => {
    if (!channelUrl.trim()) {
      setChannelError('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –∫–∞–Ω–∞–ª');
      return;
    }

    if (!validateChannelUrl(channelUrl)) {
      setChannelError('–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å—Å—ã–ª–∫–∏ –Ω–∞ YouTube –∫–∞–Ω–∞–ª');
      setSearchProgress(null);
      setProgressDetails('');
      return;
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
    if (!user) {
      console.log('‚ùå [CHANNEL] User not authenticated');
      showLoginModal();
      return;
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏–º–∏—Ç–∞ –∑–∞–ø—Ä–æ—Å–æ–≤ (—Ç–æ–ª—å–∫–æ –¥–ª—è –Ω–µ-pro –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π)
    if (!proModel && !canMakeRequest()) {
      console.log('‚ùå [CHANNEL] Request limit exceeded');
      setShowRequestLimit(true);
      return;
    }
    
    // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –∑–∞–ø—Ä–æ—Å–æ–≤ —Å—Ä–∞–∑—É –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –∫–Ω–æ–ø–∫–∏ (—Ç–æ–ª—å–∫–æ –¥–ª—è –Ω–µ-pro –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π)
    if (!proModel) {
      incrementRequestCount();
      setRequestCount(getUsedRequestsToday());
      console.log(`üìä [CHANNEL] Request count incremented immediately. Used today: ${getUsedRequestsToday()}, Remaining: ${getRemainingRequests()}`);
    }
    
    console.log(`\nüöÄ [CHANNEL] Getting videos for channel: "${channelUrl}" with limit: ${selectedVideoCount}`);
    setIsLoadingVideos(true);
    setChannelVideosResults(null);
    setChannelSummaryData(null);
    setChannelError(null);
    setCurrentParsingHistoryId(null); // –°–±—Ä–∞—Å—ã–≤–∞–µ–º ID –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –ø–∞—Ä—Å–∏–Ω–≥–∞
    
    try {
      // –ü–æ–ª—É—á–∞–µ–º –≤–∏–¥–µ–æ –∫–∞–Ω–∞–ª–∞ —á–µ—Ä–µ–∑ Supadata
      const { Supadata } = await import('@supadata/js');
      const supadata = new Supadata({
        apiKey: 'sd_cf39c3a6069af680097faf6f996b8c16'
      });
      
      const channelVideos = await supadata.youtube.channel.videos({
        id: channelUrl,
        type: 'all',
        limit: selectedVideoCount,
      });
      
      console.log(`‚úÖ [CHANNEL] Channel videos received:`, channelVideos);
      
      // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —Ñ–æ—Ä–º–∞—Ç –∫–∞–∫ –Ω–∞ –≥–ª–∞–≤–Ω–æ–º —ç–∫—Ä–∞–Ω–µ
      const videoIds = channelVideos.videoIds || [];
      
      // –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–∏–¥–µ–æ —á–µ—Ä–µ–∑ Supadata –∏–Ω–∫—Ä–µ–º–µ–Ω—Ç–∞–ª—å–Ω–æ
      console.log(`üìù [CHANNEL] Getting full video info for ${videoIds.length} videos...`);
      
      const videosWithInfo = [];
      
      // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤–∏–¥–µ–æ –ø–æ –æ–¥–Ω–æ–º—É –¥–ª—è –∏–Ω–∫—Ä–µ–º–µ–Ω—Ç–∞–ª—å–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
      for (let i = 0; i < videoIds.length; i++) {
        const videoId = videoIds[i];
        console.log(`üìù [CHANNEL] Processing video ${i + 1}/${videoIds.length}: ${videoId}`);
        
        try {
          const videoInfo = await supadata.youtube.video({
            id: videoId
          });
          
          const video = {
            videoId: videoId,
            title: videoInfo.title || `Video ${videoId}`,
            author: videoInfo.channel?.name || parsingResults.channelName,
            duration: videoInfo.duration || 'N/A',
            url: `https://youtube.com/watch?v=${videoId}`,
            thumbnail: videoInfo.thumbnail || `https://img.youtube.com/vi/${videoId}/default.jpg`,
            views: videoInfo.viewCount || 'N/A',
            publishedAt: videoInfo.uploadDate || 'N/A'
          };
          
          videosWithInfo.push(video);
          
          // –ù–µ–º–µ–¥–ª–µ–Ω–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤–∏–¥–µ–æ
          setChannelVideosResults(prev => ({
            videos: [...videosWithInfo],
            totalCount: videosWithInfo.length
          }));
          
          console.log(`‚úÖ [CHANNEL] Video ${i + 1}/${videoIds.length} added to display:`, video.title);
          
        } catch (error) {
          console.warn(`‚ö†Ô∏è [CHANNEL] Failed to get info for video ${videoId}:`, error);
          // Fallback –µ—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
          const fallbackVideo = {
            videoId: videoId,
            title: `Video ${videoId}`,
            author: parsingResults.channelName,
            duration: 'N/A',
            url: `https://youtube.com/watch?v=${videoId}`,
            thumbnail: `https://img.youtube.com/vi/${videoId}/default.jpg`,
            views: 'N/A',
            publishedAt: 'N/A'
          };
          
          videosWithInfo.push(fallbackVideo);
          
          // –ù–µ–º–µ–¥–ª–µ–Ω–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤–∏–¥–µ–æ
          setChannelVideosResults(prev => ({
            videos: [...videosWithInfo],
            totalCount: videosWithInfo.length
          }));
          
          console.log(`‚ö†Ô∏è [CHANNEL] Fallback video ${i + 1}/${videoIds.length} added to display:`, fallbackVideo.title);
        }
      }
      
      console.log(`‚úÖ [CHANNEL] Full video info received for all ${videosWithInfo.length} videos`);
      
      // –¢–µ–ø–µ—Ä—å –ø–æ–ª—É—á–∞–µ–º transcript—ã –∏–Ω–∫—Ä–µ–º–µ–Ω—Ç–∞–ª—å–Ω–æ
      console.log(`üìù [CHANNEL] Getting transcripts for ${videosWithInfo.length} videos...`);
      const videosWithTranscripts = await addTranscriptsToVideos(videosWithInfo, (updatedVideos) => {
        // Callback –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–∞–∂–¥–æ–≥–æ transcript
        setChannelVideosResults(prev => ({
          videos: updatedVideos,
          totalCount: updatedVideos.length
        }));
      });
      
      // –§–∏–Ω–∞–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
      setChannelVideosResults({
        videos: videosWithTranscripts,
        totalCount: videosWithTranscripts.length
      });
      
      console.log(`‚úÖ [CHANNEL] Channel videos with transcripts received successfully:`, videosWithTranscripts);
      
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–∞—Ä—Å–∏–Ω–≥–∞ –∫–∞–Ω–∞–ª–∞ –≤ –∏—Å—Ç–æ—Ä–∏—é
      await saveParsingToHistory(videosWithTranscripts, false);
      
    } catch (error) {
      console.error('‚ùå [CHANNEL] Error getting channel videos:', error);
      setChannelError('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –≤–∏–¥–µ–æ –∫–∞–Ω–∞–ª–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.');
    } finally {
      console.log(`\nüèÅ [CHANNEL] Channel videos request completed`);
      setIsLoadingVideos(false);
      
      // –°—á–µ—Ç—á–∏–∫ —É–∂–µ –±—ã–ª —É–≤–µ–ª–∏—á–µ–Ω –≤ –Ω–∞—á–∞–ª–µ —Ñ—É–Ω–∫—Ü–∏–∏
    }
  };

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–∞—Ä—Å–∏–Ω–≥–∞ –≤ –∏—Å—Ç–æ—Ä–∏—é (–±–µ–∑ summary)
  const saveParsingToHistory = async (videos, isVideo = false) => {
    try {
      let queryTitle;
      if (isVideo && videos.length === 1) {
        // –≠—Ç–æ –æ—Ç–¥–µ–ª—å–Ω–æ–µ –≤–∏–¥–µ–æ
        const videoTitle = videos[0]?.title || 'Unknown Video';
        queryTitle = `Video: ${videoTitle}`;
      } else {
        // –≠—Ç–æ –∫–∞–Ω–∞–ª
        const channelName = parsingResults?.channelName || 'Unknown Channel';
        queryTitle = `Channel: ${channelName}`;
      }
      
      const searchData = {
        query: queryTitle,
        searchResults: videos || [],
        summaryData: null // –ü–æ–∫–∞ –±–µ–∑ summary
      };
      
      const historyId = await saveSearchToHistory(searchData, user?.uid);
      if (historyId) {
        console.log('‚úÖ [APP] Parsing results saved to history with ID:', historyId);
        setCurrentParsingHistoryId(historyId);
        return historyId;
      } else {
        console.log('‚ö†Ô∏è [APP] Failed to save parsing results to history');
        return null;
      }
    } catch (error) {
      console.error('‚ùå [APP] Error saving parsing results to history:', error);
      return null;
    }
  };

  const handleChannelSummaryComplete = async (summaryResult) => {
    console.log(`üìã [CHANNEL] Summary completed:`, summaryResult);
    setChannelSummaryData(summaryResult);
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∑–∞–ø–∏—Å—å –∏—Å—Ç–æ—Ä–∏–∏ —Å summary –¥–∞–Ω–Ω—ã–º–∏
    try {
      if (currentParsingHistoryId) {
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∑–∞–ø–∏—Å—å
        const updateSuccess = await updateHistoryItem(
          currentParsingHistoryId,
          { summaryData: summaryResult },
          user?.uid
        );
        
        if (updateSuccess) {
          console.log('‚úÖ [APP] History item updated with summary, ID:', currentParsingHistoryId);
        } else {
          console.log('‚ö†Ô∏è [APP] Failed to update history item with summary, creating new one...');
          // Fallback - —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å –µ—Å–ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å
          await createNewHistoryEntry(summaryResult);
        }
      } else {
        // –ï—Å–ª–∏ –Ω–µ—Ç —Ç–µ–∫—É—â–µ–≥–æ ID, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å (fallback)
        console.log('‚ÑπÔ∏è [APP] No current history ID, creating new entry...');
        await createNewHistoryEntry(summaryResult);
      }
    } catch (error) {
      console.error('‚ùå [APP] Error updating history with summary:', error);
    }
  };

  // Fallback —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–π –∑–∞–ø–∏—Å–∏ –∏—Å—Ç–æ—Ä–∏–∏
  const createNewHistoryEntry = async (summaryResult) => {
    try {
      let queryTitle;
      if (channelVideosResults && channelVideosResults.totalCount === 1) {
        // –≠—Ç–æ –æ—Ç–¥–µ–ª—å–Ω–æ–µ –≤–∏–¥–µ–æ
        const videoTitle = channelVideosResults.videos[0]?.title || 'Unknown Video';
        queryTitle = `Video: ${videoTitle}`;
      } else {
        // –≠—Ç–æ –∫–∞–Ω–∞–ª
        const channelName = parsingResults?.channelName || 'Unknown Channel';
        queryTitle = `Channel: ${channelName}`;
      }
      
      const searchData = {
        query: queryTitle,
        searchResults: channelVideosResults?.videos || [],
        summaryData: summaryResult
      };
      
      const historyId = await saveSearchToHistory(searchData, user?.uid);
      if (historyId) {
        console.log('‚úÖ [APP] New history entry created with summary, ID:', historyId);
        setCurrentParsingHistoryId(historyId);
      }
    } catch (error) {
      console.error('‚ùå [APP] Error creating new history entry:', error);
    }
  };

  const handleChannelKeyPress = (e) => {
    if (e.key === 'Enter') {
      handleVideoOrChannelParse();
    }
  };

  return (
    <div className="App">
      <DefaultQuery onLoadDefaultQuery={handleLoadDefaultQuery} />
      {/* –ù–∞–≤–∏–≥–∞—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞ –Ω–∞ –≤—Å–µ—Ö —Å—Ç—Ä–∞–Ω–∏—Ü–∞—Ö */}
      <Navigation 
        currentPage={currentPage} 
        onPageChange={setCurrentPage}
        selectedHistoryId={selectedHistoryId}
        onResetHistory={() => setSelectedHistoryId(null)}
        onShowPaywall={() => setShowPaywall(true)}
        isLoading={isLoading}
      />
      
      {currentPage === 'history' ? (
        <History 
          onBackToMain={() => setCurrentPage('main')}
          selectedHistoryId={selectedHistoryId}
          setSelectedHistoryId={setSelectedHistoryId}
        />
      ) : currentPage === 'about' ? (
        <AboutUs />
      ) : (
        <>

          <div className="header">
            <h1 className="main-heading">YouTube Semantic Searcher</h1>
            <div className="search-box">
              <div className="search-input-group">
                <div className="search-input-row">
                  <input
                    type="text"
                    className="search-input"
                    placeholder={searchMode === 'request' ? "Write your request..." : "Paste YouTube video or channel URL..."}
                    value={searchMode === 'request' ? query : channelUrl}
                                     onChange={(e) => {
                       if (searchMode === 'request') {
                         const newValue = e.target.value;
                         setQuery(newValue);
                         setChannelError(null); // –û—á–∏—â–∞–µ–º –æ—à–∏–±–∫—É –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –∑–∞–ø—Ä–æ—Å–∞
                         
                         // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –≤–≤–µ–¥–µ–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ YouTube URL
                         const videoId = extractVideoId(newValue);
                         const isChannelUrl = validateChannelUrl(newValue);
                         
                         if (videoId || isChannelUrl) {
                           // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ —Ä–µ–∂–∏–º parsing
                           setSearchMode('parsing');
                           setChannelUrl(newValue);
                           setQuery(''); // –û—á–∏—â–∞–µ–º –ø–æ–ª–µ –∑–∞–ø—Ä–æ—Å–∞
                           console.log(`üîÑ [APP] Auto-switched to parsing mode for URL: ${newValue}`);
                         }
                       } else {
                         setChannelUrl(e.target.value);
                         setChannelError(null); // –û—á–∏—â–∞–µ–º –æ—à–∏–±–∫—É –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ URL
                       }
                     }}
                    onKeyPress={searchMode === 'request' ? handleKeyPress : handleChannelKeyPress}
                    disabled={isLoading}
                  />
                  <button 
                    className="search-button"
                    onClick={searchMode === 'request' ? handleSearch : handleVideoOrChannelParse}
                    disabled={isLoading}
                  >
                    {isLoading ? (searchMode === 'request' ? 'Searching...' : 'Parsing...') : (searchMode === 'request' ? 'Search' : 'Parse')}
                  </button>
                </div>
                <div className="toggles-container">
                  <div className="search-mode-toggle">
                    <button
                      className={`toggle-button ${searchMode === 'request' ? 'active' : ''}`}
                      onClick={() => {
                        setSearchMode('request');
                        setChannelError(null);
                      }}
                      disabled={isLoading}
                    >
                      Search
                    </button>
                    <button
                      className={`toggle-button ${searchMode === 'parsing' ? 'active' : ''}`}
                      onClick={() => {
                        setSearchMode('parsing');
                        setChannelError(null);
                      }}
                      disabled={isLoading}
                    >
                      Link to video or channel
                    </button>
                  </div>
                  
                  <div className="additional-toggles">
                    <div className="toggle-item">
                      <label className="toggle-switch">
                        <input
                          type="checkbox"
                          checked={proModel}
                          onChange={(e) => setProModel(e.target.checked)}
                          disabled={isLoading}
                        />
                        <span className="toggle-slider"></span>
                      </label>
                      <span className="toggle-label">
                        Pro Model
                        <span className="tooltip-trigger" data-tooltip="–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏ Gemini 2.0 Flash Lite (Google). –≠—Ç–∞ –º–æ–¥–µ–ª—å –æ–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç –±–æ–ª–µ–µ –≤—ã—Å–æ–∫–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤, –Ω–æ –ø–æ—Ç—Ä–µ–±–ª—è–µ—Ç –±–æ–ª—å—à–µ —Ç–æ–∫–µ–Ω–æ–≤ –∏ —Å—Ç–æ–∏—Ç –¥–æ—Ä–æ–∂–µ.">
                          ‚ùì
                        </span>
                      </span>
                    </div>
                    
                    <div className="toggle-item">
                      <label className="toggle-switch">
                        <input
                          type="checkbox"
                          checked={detailedSummary}
                          onChange={(e) => {
                            console.log(`üîÑ [APP] Detailed Summary –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω: ${e.target.checked ? '–í–ö–õ–Æ–ß–ï–ù' : '–í–´–ö–õ–Æ–ß–ï–ù'}`);
                            setDetailedSummary(e.target.checked);
                          }}
                          disabled={isLoading}
                        />
                        <span className="toggle-slider"></span>
                      </label>
                      <span className="toggle-label">
                        Detailed Summary
                        <span className="tooltip-trigger" data-tooltip="–°–æ–∑–¥–∞–Ω–∏–µ –±–æ–ª–µ–µ –ø–æ–¥—Ä–æ–±–Ω–æ–≥–æ —Ä–µ–∑—é–º–µ —Å –¥–µ—Ç–∞–ª—å–Ω—ã–º–∏ –ø–æ—è—Å–Ω–µ–Ω–∏—è–º–∏, –∞–Ω–∞–ª–∏–∑–æ–º –∫–ª—é—á–µ–≤—ã—Ö –º–æ–º–µ–Ω—Ç–æ–≤ –∏ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–º–∏ –≤—ã–≤–æ–¥–∞–º–∏.">
                          ‚ùì
                        </span>
                      </span>
                    </div>
                    
                    <div className="requests-info">
                      <span className="requests-text">
                        üìä {requestCount}/3 –∑–∞–ø—Ä–æ—Å–æ–≤ —Å–µ–≥–æ–¥–Ω—è
                      </span>
                      <button 
                        className="test-reset-button"
                        onClick={() => {
                          resetRequestCount();
                          setRequestCount(0);
                        }}
                        title="–°–±—Ä–æ—Å–∏—Ç—å —Å—á–µ—Ç—á–∏–∫ (–¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)"
                      >
                        üîÑ
                      </button>
                      <button 
                        className="test-increment-button"
                        onClick={() => {
                          incrementRequestCount();
                          setRequestCount(getUsedRequestsToday());
                        }}
                        title="–£–≤–µ–ª–∏—á–∏—Ç—å —Å—á–µ—Ç—á–∏–∫ (–¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)"
                      >
                        ‚ûï
                      </button>
                      <button 
                        className="test-limit-button"
                        onClick={() => {
                          // –°–∏–º—É–ª–∏—Ä—É–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –ª–∏–º–∏—Ç–∞ –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                          if (!canMakeRequest()) {
                            setShowRequestLimit(true);
                          } else {
                            alert('–ú–æ–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å –∑–∞–ø—Ä–æ—Å!');
                          }
                        }}
                        title="–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ª–∏–º–∏—Ç (–¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)"
                      >
                        üîç
                      </button>
                    </div>
                  </div>
                </div>
                
                {/* –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –ø–æ–∏—Å–∫–∞ */}
                {searchProgress && (
                  <SearchProgress 
                    currentStep={searchProgress}
                    stepDetails={progressDetails}
                    progressPercentage={summaryProgress}
                  />
                )}
              </div>
            </div>
          </div>



                     {/* –°–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ */}
           {channelError && (
             <div className="error-message">
               <p>{channelError}</p>
             </div>
           )}

                    {/* –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–Ω—Ç */}
          {searchMode === 'request' ? (
            // –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –æ–±—ã—á–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞
            <div 
              className="main-content"
              onMouseMove={handleMouseMove}
              onMouseUp={handleMouseUp}
              onMouseLeave={handleMouseUp}
            >
              {/* –õ–µ–≤–∞—è –∫–æ–ª–æ–Ω–∫–∞ - –û–±—â–∏–π –≤—ã–≤–æ–¥ */}
              <div 
                className="left-column"
                style={{ width: `${leftColumnWidth}%` }}
              >
                <div className="summary-section">
                  <div className="summary-header">
                    <h2>üìã –û–±—â–∏–π –≤—ã–≤–æ–¥</h2>
                  </div>
                  
                  {/* –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ä–µ–∑—é–º–µ */}
                  {searchResults && searchResults.length > 0 && (
                    <TranscriptSummary 
                      videos={searchResults}
                      userQuery={query}
                      onSummaryComplete={handleSummaryComplete}
                      selectedModel={selectedModel}
                      summaryData={summaryData}
                      detailedSummary={detailedSummary}
                      onProgressUpdate={setSummaryProgress}
                    />
                  )}

                  {/* –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≥–æ—Ç–æ–≤–æ–≥–æ —Ä–µ–∑—é–º–µ */}
                  {summaryData && (
                    <div className="summary-display">
                      <div className="summary-stats">
                        <div className="stat-item">
                          <span className="stat-label">–í—Å–µ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤:</span>
                          <span className="stat-value">{summaryData.totalResults}</span>
                        </div>
                        <div className="stat-item">
                          <span className="stat-label">Transcript –Ω–∞–π–¥–µ–Ω–æ:</span>
                          <span className="stat-value">{summaryData.transcriptCount}</span>
                        </div>
                      </div>

                      <div className="summary-content">
                        <h4>üìã –†–µ–∑—é–º–µ –ø–æ –∑–∞–ø—Ä–æ—Å—É: "{query}"</h4>
                        <div className="summary-text">
                          {summaryData.summary.split('\n').map((line, index) => (
                            <p key={index}>{line}</p>
                          ))}
                        </div>
                      </div>
                    </div>
                  )}

                  {/* –ü–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä –∫–æ–≥–¥–∞ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö */}
                  {!summaryData && !searchResults && (
                    <div className="placeholder">
                      <p>–†–µ–∑—é–º–µ –±—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ—Å–ª–µ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞</p>
                    </div>
                  )}
                </div>
              </div>

              {/* –†–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å –∫–æ–ª–æ–Ω–æ–∫ */}
              <div 
                className="column-resizer"
                onMouseDown={handleMouseDown}
              ></div>

              {/* –ü—Ä–∞–≤–∞—è –∫–æ–ª–æ–Ω–∫–∞ - –û—Ç–¥–µ–ª—å–Ω—ã–µ –≤–∏–¥–µ–æ */}
              <div className="right-column">
                <div className="videos-section">
                  <h2>üì∫ –ù–∞–π–¥–µ–Ω–Ω—ã–µ –≤–∏–¥–µ–æ</h2>
                  
                  {searchResults ? (
                    <div className="videos-list">
                      {searchResults.map((video, index) => (
                        <VideoItem key={index} video={video} index={index} />
                      ))}
                    </div>
                  ) : (
                    <div className="placeholder">
                      <p>–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ –ø–æ—è–≤—è—Ç—Å—è –∑–¥–µ—Å—å</p>
                    </div>
                  )}
                </div>
              </div>
            </div>
          ) : (
            // –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ –∫–∞–Ω–∞–ª–æ–≤
            <div className="main-content">
              <div className="channel-results">
                                    {parsingResults ? (
                      <div className="results-section">
                        {/* –ü–æ–∫–∞–∑—ã–≤–∞–µ–º channel-info —Ç–æ–ª—å–∫–æ –¥–ª—è –∫–∞–Ω–∞–ª–æ–≤, –Ω–µ –¥–ª—è –æ—Ç–¥–µ–ª—å–Ω—ã—Ö –≤–∏–¥–µ–æ */}
                        {!(channelVideosResults && channelVideosResults.totalCount === 1) && (
                        <div className="channel-info">
                          {/* –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è */}
                          <div className="channel-actions-top">
                            <div className="channel-header-left">
                              <h2>üì∫ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ {channelVideosResults && channelVideosResults.totalCount === 1 ? '–≤–∏–¥–µ–æ' : '–∫–∞–Ω–∞–ª–µ'}</h2>
                              {parsingResults && (
                                <div className="channel-actions-right">
                                  <div className="video-count-selector">
                                    <label htmlFor="videoCount">–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–∏–¥–µ–æ:</label>
                                    <select 
                                      id="videoCount" 
                                      className="video-count-select"
                                      value={selectedVideoCount}
                                      onChange={(e) => setSelectedVideoCount(parseInt(e.target.value))}
                                    >
                                      <option value="1">1</option>
                                      <option value="5">5</option>
                                      <option value="10">10</option>
                                      <option value="15">15</option>
                                      <option value="20">20</option>
                                      <option value="25">25</option>
                                      <option value="30">30</option>
                                      <option value="35">35</option>
                                      <option value="40">40</option>
                                      <option value="45">45</option>
                                      <option value="50">50</option>
                                    </select>
                                  </div>
                                  <button 
                                    className="get-videos-button"
                                    onClick={handleGetVideos}
                                    disabled={isLoadingVideos}
                                  >
                                    {isLoadingVideos ? '–ü–æ–ª—É—á–µ–Ω–∏–µ...' : '–ü–æ–ª—É—á–∏—Ç—å –≤–∏–¥–µ–æ'}
                                  </button>
                                </div>
                              )}
                            </div>
                            {/* Channel Thumbnail */}
                            {parsingResults.channelThumbnail && (
                              <div className="channel-thumbnail-preview-container">
                                <ThumbnailImage
                                  src={parsingResults.channelThumbnail} 
                                  alt={`${parsingResults.channelName} thumbnail`}
                                  className="channel-thumbnail-preview"
                                  fallbackIcon="üì∫"
                                  maxRetries={3}
                                  retryDelay={1500}
                                />
                              </div>
                            )}
                          </div>
                                              <div className="channel-info-content">
                          <div className="channel-details">
                            <div className="detail-item">
                              <span className="detail-label">{channelVideosResults && channelVideosResults.totalCount === 1 ? '–ê–≤—Ç–æ—Ä:' : '–ù–∞–∑–≤–∞–Ω–∏–µ –∫–∞–Ω–∞–ª–∞:'}</span>
                              <span className="detail-value">{parsingResults.channelName || '–ù–µ –Ω–∞–π–¥–µ–Ω–æ'}</span>
                            </div>
                            {channelVideosResults && channelVideosResults.totalCount === 1 ? (
                              // –î–ª—è –æ—Ç–¥–µ–ª—å–Ω–æ–≥–æ –≤–∏–¥–µ–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–∏–¥–µ–æ
                              <>
                                <div className="detail-item">
                                  <span className="detail-label">–ù–∞–∑–≤–∞–Ω–∏–µ –≤–∏–¥–µ–æ:</span>
                                  <span className="detail-value">{channelVideosResults.videos[0]?.title || '–ù–µ –Ω–∞–π–¥–µ–Ω–æ'}</span>
                                </div>
                                <div className="detail-item">
                                  <span className="detail-label">–ü—Ä–æ—Å–º–æ—Ç—Ä—ã:</span>
                                  <span className="detail-value">{channelVideosResults.videos[0]?.views || 'N/A'}</span>
                                </div>
                                <div className="detail-item">
                                  <span className="detail-label">–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å:</span>
                                  <span className="detail-value">{channelVideosResults.videos[0]?.duration || 'N/A'}</span>
                                </div>
                              </>
                            ) : (
                              // –î–ª—è –∫–∞–Ω–∞–ª–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞–Ω–∞–ª–µ
                              <>
                                <div className="detail-item">
                                  <span className="detail-label">–ü–æ–¥–ø–∏—Å—á–∏–∫–∏:</span>
                                  <span className="detail-value">{parsingResults.subscriberCount?.toLocaleString() || 'N/A'}</span>
                                </div>
                                <div className="detail-item">
                                  <span className="detail-label">–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–∏–¥–µ–æ:</span>
                                  <span className="detail-value">{parsingResults.videoCount}</span>
                                </div>
                                {parsingResults.description && (
                                  <div className="detail-item">
                                    <span className="detail-label">–û–ø–∏—Å–∞–Ω–∏–µ:</span>
                                    <span className="detail-value description">{parsingResults.description}</span>
                                  </div>
                                )}
                              </>
                            )}
                          </div>
                        </div>
                    </div>
                        )}

                                            {/* –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–ª—É—á–µ–Ω–∏—è –≤–∏–¥–µ–æ –≤ –¥–≤—É—Ö –∫–æ–ª–æ–Ω–∫–∞—Ö */}
                        {channelVideosResults && (
                          <div 
                            className="videos-results-section"
                            onMouseMove={handleMouseMove}
                            onMouseUp={handleMouseUp}
                            onMouseLeave={handleMouseUp}
                          >
                            {/* –õ–µ–≤–∞—è –∫–æ–ª–æ–Ω–∫–∞ - –û–±—â–∏–π –≤—ã–≤–æ–¥ */}
                            <div 
                              className="left-column"
                              style={{ width: `${parsingLeftColumnWidth}%` }}
                            >
                              <div className="summary-section">
                                <div className="summary-header">
                                  <h2>üìã –û–±—â–∏–π –≤—ã–≤–æ–¥ {channelVideosResults.totalCount === 1 ? '–ø–æ –≤–∏–¥–µ–æ' : '–ø–æ –∫–∞–Ω–∞–ª—É'}</h2>
                                </div>
                            
                            {/* –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ä–µ–∑—é–º–µ */}
                            {channelVideosResults.videos && channelVideosResults.videos.length > 0 && (
                              <>
                                <TranscriptSummary 
                                  videos={channelVideosResults.videos}
                                  userQuery={`–ö–∞–Ω–∞–ª: ${parsingResults.channelName}`}
                                  onSummaryComplete={handleChannelSummaryComplete}
                                  selectedModel={selectedModel}
                                  summaryData={channelSummaryData}
                                  detailedSummary={detailedSummary}
                                  onProgressUpdate={setSummaryProgress}
                                />
                              </>
                            )}

                            {/* –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≥–æ—Ç–æ–≤–æ–≥–æ —Ä–µ–∑—é–º–µ */}
                            {channelSummaryData && (
                              <div className="summary-display">
                                <div className="summary-stats">
                                  <div className="stat-item">
                                    <span className="stat-label">–í—Å–µ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤:</span>
                                    <span className="stat-value">{channelSummaryData.totalResults}</span>
                                  </div>
                                  <div className="stat-item">
                                    <span className="stat-label">Transcript –Ω–∞–π–¥–µ–Ω–æ:</span>
                                    <span className="stat-value">{channelSummaryData.transcriptCount}</span>
                                  </div>
                                  <div className="stat-item">
                                    <span className="stat-label">–ö–∞–Ω–∞–ª:</span>
                                    <span className="stat-value">{parsingResults.channelName}</span>
                                  </div>
                                </div>

                                <div className="summary-content">
                                  <h4>üìã –†–µ–∑—é–º–µ –∫–∞–Ω–∞–ª–∞: "{parsingResults.channelName}"</h4>
                                  <div className="summary-text">
                                    {channelSummaryData.summary.split('\n').map((line, index) => (
                                      <p key={index}>{line}</p>
                                    ))}
                                  </div>
                                </div>
                              </div>
                            )}

                            {/* –ü–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä –∫–æ–≥–¥–∞ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö */}
                            {!channelSummaryData && (
                              <div className="placeholder">
                                <p>–†–µ–∑—é–º–µ –±—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–π</p>
                              </div>
                            )}
                          </div>
                        </div>

                        {/* –†–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å –∫–æ–ª–æ–Ω–æ–∫ */}
                        <div 
                          className="column-resizer"
                          onMouseDown={handleParsingMouseDown}
                        ></div>

                        {/* –ü—Ä–∞–≤–∞—è –∫–æ–ª–æ–Ω–∫–∞ - –ù–∞–π–¥–µ–Ω–Ω—ã–µ –≤–∏–¥–µ–æ */}
                        <div className="right-column">
                          <div className="videos-section">
                            <h2>üì∫ {channelVideosResults.totalCount === 1 ? '–í–∏–¥–µ–æ' : '–ù–∞–π–¥–µ–Ω–Ω—ã–µ –≤–∏–¥–µ–æ'} ({channelVideosResults.totalCount})</h2>
                            <div className="videos-list">
                              {channelVideosResults.videos.map((video, index) => (
                                <VideoItem key={index} video={video} index={index} />
                              ))}
                            </div>
                          </div>
                        </div>
                      </div>
                    )}
                  </div>
                ) : (
                  <div className="placeholder">
                    <p>–í—Å—Ç–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ YouTube –≤–∏–¥–µ–æ –∏–ª–∏ –∫–∞–Ω–∞–ª –¥–ª—è –Ω–∞—á–∞–ª–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞</p>
                    <p className="placeholder-examples">
                      –ü—Ä–∏–º–µ—Ä—ã –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤:<br/>
                      <strong>–í–∏–¥–µ–æ:</strong><br/>
                      ‚Ä¢ https://youtube.com/watch?v=VIDEO_ID<br/>
                      ‚Ä¢ https://youtu.be/VIDEO_ID<br/>
                      <strong>–ö–∞–Ω–∞–ª—ã:</strong><br/>
                      ‚Ä¢ https://youtube.com/channel/UC...<br/>
                      ‚Ä¢ https://youtube.com/c/ChannelName<br/>
                      ‚Ä¢ https://youtube.com/@username<br/>
                      ‚Ä¢ https://youtube.com/user/username
                    </p>
                  </div>
                )}
              </div>
            </div>
          )}
        </>
      )}

      {/* Paywall Modal */}
      {showPaywall && (
        <Paywall 
          onClose={handleClosePaywall}
          onSubscribe={handleSubscribe}
        />
      )}

      {/* Request Limit Modal */}
      {showRequestLimit && (
        <RequestLimitModal 
          onClose={handleCloseRequestLimit}
          onUpgrade={handleUpgradeFromLimit}
          remainingRequests={getRemainingRequests()}
          usedRequests={requestCount}
        />
      )}

      {/* Auth Modal */}
      {showAuthModal && (
        <AuthModal 
          isOpen={showAuthModal}
          onClose={handleCloseAuthModal}
          mode={authModalMode}
        />
      )}

      {/* Token Limit Modal */}
      {showTokenLimit && userTokens && (
        <TokenLimitModal 
          onClose={handleCloseTokenLimit}
          onUpgrade={handleUpgradeFromTokenLimit}
          currentTokens={userTokens.tokens}
          subscriptionType={userTokens.subscription}
        />
      )}
    </div>
  );
}

function App() {
  return (
    <AuthProvider>
      <AppContent />
    </AuthProvider>
  );
}

export default App;
