import { Supadata } from '@supadata/js';

// Initialize the client
const supadata = new Supadata({
    apiKey: 'sd_cf39c3a6069af680097faf6f996b8c16'
});

// –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
console.log('üîç [SUPADATA] –î–æ—Å—Ç—É–ø–Ω—ã–µ –º–µ—Ç–æ–¥—ã:', Object.keys(supadata.youtube.batch || {}));

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è transcript –æ–¥–Ω–æ–≥–æ –≤–∏–¥–µ–æ
export async function getVideoTranscript(videoId) {
    try {
        console.log(`üé¨ [SUPADATA] –ü–æ–ª—É—á–∞–µ–º transcript –¥–ª—è –≤–∏–¥–µ–æ: ${videoId}`);
        
        // Get transcript for a single video
        const transcriptResult = await supadata.youtube.transcript({
            url: `https://www.youtube.com/watch?v=${videoId}`,
            lang: 'en',
            text: true
        });
        
        console.log(`‚úÖ [SUPADATA] Transcript –ø–æ–ª—É—á–µ–Ω –¥–ª—è –≤–∏–¥–µ–æ: ${videoId}`);
        return transcriptResult;
        
    } catch (error) {
        console.error(`‚ùå [SUPADATA] –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è transcript –¥–ª—è –≤–∏–¥–µ–æ ${videoId}:`, error);
        return null;
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è transcript–æ–≤ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –≤–∏–¥–µ–æ –ø–æ –æ—Ç–¥–µ–ª—å–Ω–æ—Å—Ç–∏
export async function getVideosTranscripts(videoIds) {
    console.log(`üöÄ [SUPADATA] –ü–æ–ª—É—á–∞–µ–º transcript—ã –¥–ª—è ${videoIds.length} –≤–∏–¥–µ–æ –ø–æ –æ—Ç–¥–µ–ª—å–Ω–æ—Å—Ç–∏`);
    
    const results = [];
    
    for (let i = 0; i < videoIds.length; i++) {
        const videoId = videoIds[i];
        console.log(`üìù [SUPADATA] –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤–∏–¥–µ–æ ${i + 1}/${videoIds.length}: ${videoId}`);
        
        try {
            const transcript = await getVideoTranscript(videoId);
            results.push({
                videoId: videoId,
                transcript: transcript
            });
            
            // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
            if (i < videoIds.length - 1) {
                await new Promise(resolve => setTimeout(resolve, 100));
            }
            
        } catch (error) {
            console.error(`‚ùå [SUPADATA] –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∏–¥–µ–æ ${videoId}:`, error);
            results.push({
                videoId: videoId,
                transcript: null
            });
        }
    }
    
    console.log(`‚úÖ [SUPADATA] –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ ${results.length} –≤–∏–¥–µ–æ`);
    return results;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è batch job (–æ—Å—Ç–∞–≤–ª–µ–Ω–∞ –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
export async function createTranscriptBatch(videoIds) {
    try {
        console.log(`üöÄ [SUPADATA] –°–æ–∑–¥–∞–µ–º batch job –¥–ª—è ${videoIds.length} –≤–∏–¥–µ–æ —á–µ—Ä–µ–∑ SDK`);
        
        // Start a YouTube transcript batch job
        const transcriptBatch = await supadata.youtube.transcript.batch({
            videoIds: videoIds,
            lang: 'en',
            text: true
        });
        
        console.log(`üìã [SUPADATA] Batch job —Å–æ–∑–¥–∞–Ω: ${transcriptBatch.jobId}`);
        return transcriptBatch.jobId;
        
    } catch (error) {
        console.error('[SUPADATA] –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è batch job:', error);
        throw error;
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ batch job (–æ—Å—Ç–∞–≤–ª–µ–Ω–∞ –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
export async function checkBatchStatus(jobId) {
    try {
        console.log(`üìä [SUPADATA] –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å batch job: ${jobId}`);
        
        // Check the status of a batch job
        const batchResult = await supadata.youtube.batch.getBatchResults(jobId);
        
        console.log(`üìä [SUPADATA] Batch status: ${batchResult.status}`);
        return batchResult;
        
    } catch (error) {
        console.error('[SUPADATA] –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞:', error);
        throw error;
    }
} 