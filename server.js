// –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è

console.log('‚¨ÖÔ∏è –î–æ dotenv');
require('dotenv').config();
console.log('‚û°Ô∏è –ü–æ—Å–ª–µ dotenv');
console.log('[CHECK] OPENAI_API_KEY:', process.env.OPENAI_API_KEY);
console.log('[CHECK] REACT_APP_OPENAI_API_KEY:', process.env.REACT_APP_OPENAI_API_KEY);


const express = require('express');
const cors = require('cors');
const yts = require('yt-search');
const { getTranscriptSummary } = require('./transcript-summarizer.cjs');


const app = express();
const PORT = process.env.PORT || 3001;
const searchVideoCount = 1;  // –∫–æ–ª-–≤–æ –≤–∏–¥–µ–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—ã—Ö —Å–µ—Ä–≤–µ—Ä–æ–º

// Supadata API –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
const SUPADATA_API_KEY = "sd_cf39c3a6069af680097faf6f996b8c16"; // –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à API –∫–ª—é—á
const SUPADATA_BASE_URL = "https://api.supadata.ai/v1";

// –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–π –∏–º–ø–æ—Ä—Ç Supadata —Ñ—É–Ω–∫—Ü–∏–π
let createTranscriptBatch, checkBatchStatus;
(async () => {
    const supadataModule = await import('./src/supadata-client.js');
    createTranscriptBatch = supadataModule.createTranscriptBatch;
    checkBatchStatus = supadataModule.checkBatchStatus;
    console.log('‚úÖ [SUPADATA] –§—É–Ω–∫—Ü–∏–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã');
})().catch(console.error);

// CORS middleware - –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –¥–ª—è –ø—Ä–æ–¥–∞–∫—à–µ–Ω–∞
const corsOptions = {
  origin: process.env.NODE_ENV === 'production' 
    ? [process.env.FRONTEND_URL || 'https://yourdomain.com'] 
    : ['http://localhost:3000', 'http://localhost:3001'],
  credentials: true,
  optionsSuccessStatus: 200
};

app.use(cors(corsOptions));
app.use(express.json({ limit: '100mb' }));
app.use(express.urlencoded({ limit: '100mb', extended: true }));

/**
 * Search videos using yt-search library with retry logic
 * @param {string} phrase - Search phrase
 * @param {number} limit - Maximum number of videos
 * @param {number} retries - Number of retry attempts (default: 2)
 * @returns {Promise<Array>} Array of video objects
 */
async function searchVideos(phrase, limit = searchVideoCount, retries = 2) {
  for (let attempt = 1; attempt <= retries; attempt++) {
    try {
      console.log(`üîç [SERVER] Searching for: "${phrase}" (attempt ${attempt}/${retries})`);
      
      // Add timeout to prevent hanging - reduced to 15 seconds
      const searchPromise = yts(phrase);
      const timeoutPromise = new Promise((_, reject) => {
        setTimeout(() => reject(new Error('Search timeout after 15 seconds')), 15000);
      });
      
      console.log(`‚è±Ô∏è [SERVER] Starting yt-search with timeout...`);
      const result = await Promise.race([searchPromise, timeoutPromise]);
      
      console.log(`üì¶ [SERVER] Raw yt-search result:`, result);
      const videos = result.videos || [];
      
      console.log(`üìä [SERVER] Found ${videos.length} videos`);
      
      // Limit and transform results
      const limitedVideos = videos.slice(0, limit).map(video => ({
        id: video.videoId,
        videoId: video.videoId,
        title: video.title,
        description: video.description || '',
        url: video.url,
        thumbnail: video.thumbnail || '',
        channelTitle: video.author?.name || '',
        publishedAt: video.ago || '',
        duration: video.duration?.timestamp || '',
        views: video.views || 0,
        timestamp: video.timestamp || ''
      }));
      
      console.log(`‚úÖ [SERVER] Returning ${limitedVideos.length} videos`);
      return limitedVideos;
      
    } catch (error) {
      console.error(`‚ùå [SERVER] Error searching videos (attempt ${attempt}):`, error.message);
      
      if (attempt === retries) {
        console.error(`‚ùå [SERVER] All ${retries} attempts failed for phrase: "${phrase}"`);
        return [];
      }
      
      // Wait before retry
      const waitTime = attempt * 2000; // 2s, 4s
      console.log(`‚è≥ [SERVER] Waiting ${waitTime}ms before retry...`);
      await new Promise(resolve => setTimeout(resolve, waitTime));
    }
  }
}



// GET /api/search - search for videos
app.get('/api/search', async (req, res) => {
  try {
    const { q, limit = 10 } = req.query;
    
    if (!q || typeof q !== 'string' || q.trim().length === 0) {
      return res.status(400).json({ 
        error: 'Missing or invalid query parameter "q"' 
      });
    }
    
    console.log(`üìù [SERVER] Received search request: "${q}"`);
    
    const videos = await searchVideos(q.trim(), parseInt(limit));
    
    res.json({
      success: true,
      videos: videos,
      count: videos.length,
      query: q.trim()
    });
    
  } catch (error) {
    console.error(`‚ùå [SERVER] Error in /api/search:`, error);
    res.status(500).json({ 
      error: 'Internal server error',
      message: error.message 
    });
  }
});

// GET /api/batch-search - search multiple phrases
app.post('/api/batch-search', async (req, res) => {
  try {
    const { phrases, videosPerPhrase = 10 } = req.body;
    
    if (!phrases || !Array.isArray(phrases) || phrases.length === 0) {
      return res.status(400).json({ 
        error: 'Missing or invalid phrases array' 
      });
    }
    
    console.log(`üöÄ [SERVER] Batch search for ${phrases.length} phrases`);
    
    const allVideos = [];
    const seenVideoIds = new Set();
    
    // Search all phrases in parallel
    const searchPromises = phrases.map(async (phrase, index) => {
      console.log(`üìù [SERVER] Searching phrase ${index + 1}/${phrases.length}: "${phrase}"`);
      const videos = await searchVideos(phrase, videosPerPhrase);
      return { phrase, videos, phraseIndex: index };
    });
    
    const results = await Promise.all(searchPromises);
    
    // Process results and remove duplicates
    for (const { phrase, videos, phraseIndex } of results) {
      let newVideosCount = 0;
      
      for (const video of videos) {
        const videoId = video.id || video.videoId;
        
        if (!seenVideoIds.has(videoId)) {
          seenVideoIds.add(videoId);
          allVideos.push({
            ...video,
            searchPhrase: phrase,
            phraseIndex: phraseIndex,
            duplicateCount: 1
          });
          newVideosCount++;
        } else {
          // Increment duplicate count
          const existingVideo = allVideos.find(v => (v.id || v.videoId) === videoId);
          if (existingVideo) {
            existingVideo.duplicateCount = (existingVideo.duplicateCount || 1) + 1;
          }
        }
      }
      
      console.log(`‚úÖ [SERVER] Added ${newVideosCount} new videos from "${phrase}"`);
    }
    
    // Count duplicates
    const duplicateStats = {};
    allVideos.forEach(video => {
      const count = video.duplicateCount || 1;
      duplicateStats[count] = (duplicateStats[count] || 0) + 1;
    });
    
    console.log(`üéâ [SERVER] Batch search completed! Total unique videos: ${allVideos.length}`);
    
    res.json({
      success: true,
      videos: allVideos,
      totalVideos: allVideos.length,
      duplicateStats: duplicateStats,
      phrases: phrases
    });
    
  } catch (error) {
    console.error(`‚ùå [SERVER] Error in /api/batch-search:`, error);
    res.status(500).json({ 
      error: 'Internal server error',
      message: error.message 
    });
  }
});



// Supadata —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏ —Ñ—É–Ω–∫—Ü–∏–∏
function extractVideoId(urlOrId) {
    if (urlOrId.includes('youtube.com') || urlOrId.includes('youtu.be')) {
        const patterns = [
            /(?:youtube\.com\/watch\?v=|youtu\.be\/)([a-zA-Z0-9_-]+)/,
            /youtube\.com\/embed\/([a-zA-Z0-9_-]+)/
        ];
        
        for (const pattern of patterns) {
            const match = urlOrId.match(pattern);
            if (match) {
                return match[1];
            }
        }
    }
    return urlOrId;
}

async function getVideoTranscriptSupadata(videoId) {
    try {
        // –û—á–∏—â–∞–µ–º video ID
        const cleanVideoId = extractVideoId(videoId);
        
        // –§–æ—Ä–º–∏—Ä—É–µ–º YouTube URL
        const youtubeUrl = `https://www.youtube.com/watch?v=${cleanVideoId}`;
        
        // –ó–∞–≥–æ–ª–æ–≤–∫–∏ –¥–ª—è Supadata API
        const headers = {
            "x-api-key": SUPADATA_API_KEY,
            "Content-Type": "application/json"
        };
        
        // –î–∞–Ω–Ω—ã–µ –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞
        const payload = {
            url: youtubeUrl
        };
        
        console.log(`üîç [SUPADATA] –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ Supadata –¥–ª—è –≤–∏–¥–µ–æ: ${youtubeUrl}`);
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ Supadata API
        const response = await fetch(`${SUPADATA_BASE_URL}/youtube/transcript?url=${encodeURIComponent(youtubeUrl)}`, {
            method: 'GET',
            headers: headers
        });
        
        console.log(`üì° [SUPADATA] –û—Ç–≤–µ—Ç –æ—Ç Supadata API:`);
        console.log(`   Status Code: ${response.status}`);
        
        const responseText = await response.text();
        console.log(`   Response: ${responseText}`);
        
        if (response.ok) {
            const data = JSON.parse(responseText);
            const transcript = data.content || '';
            
            return {
                success: true,
                transcript: transcript,
                video_id: cleanVideoId,
                supadata_response: data
            };
        } else {
            return {
                success: false,
                error: `Supadata API error: ${response.status} - ${responseText}`,
                video_id: cleanVideoId
            };
        }
        
    } catch (error) {
        console.log(`‚ùå [SUPADATA] –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏: ${error.message}`);
        return {
            success: false,
            error: error.message,
            video_id: videoId
        };
    }
}

// –≠–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏ –æ–¥–Ω–æ–≥–æ –≤–∏–¥–µ–æ
app.post('/api/transcript', async (req, res) => {
    try {
        const { videoId } = req.body;
        
        if (!videoId) {
            return res.status(400).json({ error: 'videoId is required' });
        }
        
        const result = await getVideoTranscriptSupadata(videoId);
        res.json(result);
        
    } catch (error) {
        console.error('[SUPADATA] –û—à–∏–±–∫–∞ –≤ /api/transcript:', error);
        res.status(500).json({ error: error.message });
    }
});



// –≠–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–π –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –≤–∏–¥–µ–æ —á–µ—Ä–µ–∑ batch API
app.post('/api/transcripts', async (req, res) => {
    try {
        const { videos } = req.body;
        
        if (!videos || !Array.isArray(videos)) {
            return res.status(400).json({ error: 'videos array is required' });
        }
        
        console.log(`üß™ [SUPADATA] –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º ${videos.length} –≤–∏–¥–µ–æ —á–µ—Ä–µ–∑ batch API`);
        
        // –ò–∑–≤–ª–µ–∫–∞–µ–º video IDs
        const videoIds = videos
            .map(video => video.videoId || video.id)
            .filter(id => id);
        
        if (videoIds.length === 0) {
            return res.json({ transcripts: [] });
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Ñ—É–Ω–∫—Ü–∏–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã
        if (!createTranscriptBatch || !checkBatchStatus) {
            throw new Error('Supadata —Ñ—É–Ω–∫—Ü–∏–∏ –µ—â–µ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã');
        }
        
        // –°–æ–∑–¥–∞–µ–º batch job
        const jobId = await createTranscriptBatch(videoIds);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å —Å –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–º –∏ retry –ª–æ–≥–∏–∫–æ–π
        let attempts = 0;
        const maxAttempts = 30; // –º–∞–∫—Å–∏–º—É–º 30 –ø–æ–ø—ã—Ç–æ–∫ (30 —Å–µ–∫—É–Ω–¥)
        const retryDelay = 3000; // 3 —Å–µ–∫—É–Ω–¥—ã –º–µ–∂–¥—É –ø–æ–ø—ã—Ç–∫–∞–º–∏
        let consecutiveErrors = 0;
        const maxConsecutiveErrors = 5; // –º–∞–∫—Å–∏–º—É–º 5 –æ—à–∏–±–æ–∫ –ø–æ–¥—Ä—è–¥
        
        while (attempts < maxAttempts) {
            attempts++;
            console.log(`‚è≥ [SUPADATA] –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å batch job (–ø–æ–ø—ã—Ç–∫–∞ ${attempts}/${maxAttempts})`);
            
            try {
                // –î–æ–±–∞–≤–ª—è–µ–º —Ç–∞–π–º–∞—É—Ç –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
                const timeoutPromise = new Promise((_, reject) => {
                    setTimeout(() => reject(new Error('Supadata request timeout')), 10000);
                });
                
                const batchResult = await Promise.race([
                    checkBatchStatus(jobId),
                    timeoutPromise
                ]);
                consecutiveErrors = 0; // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫ –ø—Ä–∏ —É—Å–ø–µ—Ö–µ
                
                switch (batchResult.status) {
                    case 'completed':
                        console.log(`‚úÖ [SUPADATA] Batch job –∑–∞–≤–µ—Ä—à–µ–Ω!`);
                        console.log(`üìä [SUPADATA] –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: ${batchResult.stats.succeeded}/${batchResult.stats.total} —É—Å–ø–µ—à–Ω–æ, ${batchResult.stats.failed} –Ω–µ—É–¥–∞—á–Ω–æ`);
                        
                        // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ –Ω—É–∂–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
                        const results = batchResult.results.map(result => ({
                            videoId: result.videoId,
                            transcript: result.transcript ? result.transcript.content : null,
                            error: result.errorCode || null,
                            supadata_response: result
                        }));
                        
                        return res.json({ 
                            transcripts: results,
                            batchJobId: jobId 
                        });
                        
                    case 'failed':
                        throw new Error(`Batch job failed: ${batchResult.error || 'Unknown error'}`);
                        
                    case 'queued':
                        console.log(`‚è∏Ô∏è [SUPADATA] Job –≤ –æ—á–µ—Ä–µ–¥–∏, –∂–¥–µ–º ${retryDelay/1000}—Å...`);
                        break;
                        
                    case 'active':
                        console.log(`üîÑ [SUPADATA] Job –∞–∫—Ç–∏–≤–µ–Ω, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è... –∂–¥–µ–º ${retryDelay/1000}—Å`);
                        break;
                        
                    default:
                        console.log(`‚ùì [SUPADATA] –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Å—Ç–∞—Ç—É—Å: ${batchResult.status}, –∂–¥–µ–º ${retryDelay/1000}—Å`);
                        break;
                }
                
            } catch (error) {
                consecutiveErrors++;
                console.log(`‚ùå [SUPADATA] –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ (${consecutiveErrors}/${maxConsecutiveErrors}): ${error.message}`);
                
                if (consecutiveErrors >= maxConsecutiveErrors) {
                    throw new Error(`–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –æ—à–∏–±–æ–∫ –ø–æ–¥—Ä—è–¥ (${consecutiveErrors}). –ü–æ—Å–ª–µ–¥–Ω—è—è –æ—à–∏–±–∫–∞: ${error.message}`);
                }
                
                // –ü—Ä–∏ –æ—à–∏–±–∫–µ –∂–¥–µ–º –¥–æ–ª—å—à–µ
                console.log(`‚è≥ [SUPADATA] –ñ–¥–µ–º ${retryDelay*2/1000}—Å –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–æ–º...`);
                await new Promise(resolve => setTimeout(resolve, retryDelay * 2));
                continue;
            }
            
            // –ñ–¥–µ–º –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –ø—Ä–æ–≤–µ—Ä–∫–æ–π
            await new Promise(resolve => setTimeout(resolve, retryDelay));
        }
        
        throw new Error('Batch job timeout - –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∑–∞ 30 —Å–µ–∫—É–Ω–¥');
        
    } catch (error) {
        console.error('[SUPADATA] –û—à–∏–±–∫–∞ –≤ /api/transcripts:', error);
        
        // Fallback: –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –≤–∏–¥–µ–æ –±–µ–∑ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç–æ–≤
        console.log('üîÑ [SUPADATA] Fallback: –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –≤–∏–¥–µ–æ –±–µ–∑ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç–æ–≤');
        const fallbackResults = videos.map(video => ({
            videoId: video.videoId || video.id,
            transcript: null,
            error: 'Supadata API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω',
            supadata_response: null
        }));
        
        res.json({ 
            transcripts: fallbackResults,
            batchJobId: null 
        });
    }
});

// –ù–æ–≤—ã–π endpoint –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ä–µ–∑—é–º–µ
app.post('/api/summarize-transcripts', async (req, res) => {
  try {
    const { jobId, userQuery } = req.body;
    
    if (!jobId || !userQuery) {
      return res.status(400).json({ 
        error: 'Missing required parameters: jobId and userQuery' 
      });
    }
    
    console.log(`üîç [API] Creating summary for jobId: ${jobId}, query: "${userQuery}"`);
    
    const result = await getTranscriptSummary(jobId, userQuery);
    
    console.log(`‚úÖ [API] Summary created successfully`);
    console.log(`üìä [API] Results:`, result);
    
    res.json(result);
    
  } catch (error) {
    console.error('‚ùå [API] Error creating summary:', error.message);
    res.status(500).json({ 
      error: 'Failed to create summary',
      details: error.message 
    });
  }
});

// –ù–æ–≤—ã–π endpoint –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ä–µ–∑—é–º–µ –∏–∑ –≤–∏–¥–µ–æ –Ω–∞–ø—Ä—è–º—É—é
app.post('/api/summarize-videos', async (req, res) => {
  try {
    const { videos, userQuery, model = 'openai/gpt-4o' } = req.body;
    
    if (!videos || !Array.isArray(videos) || !userQuery) {
      return res.status(400).json({ 
        error: 'Missing required parameters: videos array and userQuery' 
      });
    }
    
    console.log(`üîç [API] Creating summary for ${videos.length} videos, query: "${userQuery}", model: "${model}"`);
    
    // –§–∏–ª—å—Ç—Ä—É–µ–º –≤–∏–¥–µ–æ —Å transcript–∞–º–∏
    const videosWithTranscripts = videos.filter(video => video.transcript);
    
    if (videosWithTranscripts.length === 0) {
      return res.status(400).json({ 
        error: 'No videos with transcripts found' 
      });
    }
    
    console.log(`üìù [API] Found ${videosWithTranscripts.length} videos with transcripts`);
    
    // –°–æ–∑–¥–∞–µ–º —Ç–µ–∫—Å—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∏–∑ –≤—Å–µ—Ö transcript–æ–≤
    const allTranscripts = videosWithTranscripts.map(video => 
      `Video: ${video.title}\nAuthor: ${video.author}\nTranscript: ${video.transcript}\n\n`
    ).join('---\n');
    
    console.log('üìÑ [API] ALL_TRANSCRIPTS CONTENT:');
    console.log('='.repeat(80));
    console.log(allTranscripts);
    console.log('='.repeat(80));
    console.log(`üìä [API] Total length of allTranscripts: ${allTranscripts.length} characters`);
    console.log(`üìä [API] Size in KB: ${(allTranscripts.length * 2) / 1024} KB`);
    console.log(`üìä [API] Size in MB: ${(allTranscripts.length * 2) / (1024 * 1024)} MB`);
    
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º OpenRouter API –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ä–µ–∑—é–º–µ —Å –≤—ã–±—Ä–∞–Ω–Ω–æ–π –º–æ–¥–µ–ª—å—é
    const openRouterApiKey = process.env.REACT_APP_OPEN_ROUTER_API_KEY;
    if (!openRouterApiKey) {
      return res.status(500).json({ 
        error: 'OpenRouter API key not configured. Please set REACT_APP_OPEN_ROUTER_API_KEY in .env file' 
      });
    }
    
    const prompt = `Based on the following YouTube video transcripts, generate a clear and structured summary that directly answers the user's request:"${userQuery}. Make summary only with user's request language. Summary language has to be the same as user request."

Instructions for generating the summary:
1. Start by answering the user's query as directly as possible.
2. Use only information from the transcripts. Do not invent or assume anything not found in the transcripts.
3. Identify and include the most important points from each transcript that relate to the user's query.
4. If multiple transcripts discuss similar ideas or themes, highlight those recurring points.
5. If applicable, provide practical conclusions, lessons, or recommendations based on the transcripts.
6. refer to the videos themselves (e.g., titles, URLs, creators, or platforms).
8. Use emojis, markers for visual design.
Transciptions:
${allTranscripts}`;

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ OpenRouter API
    const response = await fetch('https://openrouter.ai/api/v1/chat/completions', {
      method: 'POST',
      headers: {
        'Authorization': `Bearer ${openRouterApiKey}`,
        'HTTP-Referer': 'http://localhost:3001',
        'X-Title': 'YouTube Searcher',
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        model: model,
        messages: [
          {
            role: "user",
            content: prompt
          }
        ],
        max_tokens: 2000,
        temperature: 0.7
      })
    });

    if (!response.ok) {
      const errorData = await response.json();
      const errorMessage = errorData.error?.message || response.statusText;
      
      console.log(`‚ùå [API] OpenRouter API error: ${errorMessage}`);
      console.log(`üîç [API] Checking if this is a context length error...`);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –æ—à–∏–±–∫–∞ —Å–≤—è–∑–∞–Ω–Ω–æ–π —Å –ø—Ä–µ–≤—ã—à–µ–Ω–∏–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
      if (errorMessage.includes('maximum context length') || 
          errorMessage.includes('context_length_exceeded') || 
          errorMessage.includes('tokens. However, you requested about') ||
          errorMessage.includes('Please reduce the length')) {
        console.log(`‚ö†Ô∏è [API] ‚úÖ CONFIRMED: Context length exceeded. Finding longest video and creating individual summary...`);
        
        // –ù–∞—Ö–æ–¥–∏–º —Å–∞–º–æ–µ –¥–ª–∏–Ω–Ω–æ–µ –≤–∏–¥–µ–æ –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É —Å–∏–º–≤–æ–ª–æ–≤ –≤ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç–µ
        let longestVideo = null;
        let maxLength = 0;
        let longestIndex = -1;
        
        videosWithTranscripts.forEach((video, index) => {
          const transcriptLength = video.transcript ? video.transcript.length : 0;
          if (transcriptLength > maxLength) {
            maxLength = transcriptLength;
            longestVideo = video;
            longestIndex = index;
          }
        });
        
        if (!longestVideo) {
          throw new Error(`No video with transcript found for individual processing`);
        }
        
        console.log(`üìù [API] Longest video: "${longestVideo.title}" with ${maxLength} characters`);
        
        // –°–æ–∑–¥–∞–µ–º –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ–µ —Ä–µ–∑—é–º–µ –¥–ª—è —Å–∞–º–æ–≥–æ –¥–ª–∏–Ω–Ω–æ–≥–æ –≤–∏–¥–µ–æ
        const individualSummaryPrompt = `Create a very concise summary of this YouTube video transcript. Focus ONLY on the main points and key insights. Keep it under 200 words and be very brief.

IMPORTANT LANGUAGE INSTRUCTION: ${languageConfig.instruction}

Video: ${longestVideo.title}
Author: ${longestVideo.author}
Transcript: ${longestVideo.transcript}`;

        const individualResponse = await fetch('https://openrouter.ai/api/v1/chat/completions', {
          method: 'POST',
          headers: {
            'Authorization': `Bearer ${openRouterApiKey}`,
            'HTTP-Referer': 'http://localhost:3001',
            'X-Title': 'YouTube Searcher',
            'Content-Type': 'application/json',
          },
          body: JSON.stringify({
            model: model,
            messages: [
              {
                role: "user",
                content: individualSummaryPrompt
              }
            ],
            max_tokens: 400,
            temperature: 0.5
          })
        });

        if (!individualResponse.ok) {
          throw new Error(`Failed to create individual summary for longest video`);
        }

        const individualCompletion = await individualResponse.json();
        const individualSummary = individualCompletion.choices[0].message.content;
        
        console.log(`‚úÖ [API] Individual summary created for "${longestVideo.title}"`);
        console.log(`üìÑ [API] Summary length: ${individualSummary.length} characters`);
        console.log(`üìù [API] Summary content preview: "${individualSummary.substring(0, 200)}..."`);
        
        // –ó–∞–º–µ–Ω—è–µ–º —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç —Å–∞–º–æ–≥–æ –¥–ª–∏–Ω–Ω–æ–≥–æ –≤–∏–¥–µ–æ –Ω–∞ –µ–≥–æ —Ä–µ–∑—é–º–µ
        const updatedVideosWithTranscripts = [...videosWithTranscripts];
        updatedVideosWithTranscripts[longestIndex] = {
          ...longestVideo,
          transcript: individualSummary,
          isTranscriptSummarized: true // –î–æ–±–∞–≤–ª—è–µ–º —Ñ–ª–∞–≥ —á—Ç–æ —ç—Ç–æ summary –∞ –Ω–µ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π transcript
        };
        
        console.log(`üîÑ [API] Updated video data for "${longestVideo.title}":`);
        console.log(`   - Original transcript length: ${maxLength} characters`);
        console.log(`   - New summary length: ${individualSummary.length} characters`);
        console.log(`   - isTranscriptSummarized: ${updatedVideosWithTranscripts[longestIndex].isTranscriptSummarized}`);
        
        // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Å –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–º–∏ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç–∞–º–∏
        const updatedAllTranscripts = updatedVideosWithTranscripts.map(video => 
          `Video: ${video.title}\nAuthor: ${video.author}\nTranscript: ${video.transcript}\n\n`
        ).join('---\n');
        
        console.log(`üìä [API] Updated transcripts length: ${updatedAllTranscripts.length} characters`);
        console.log(`üìä [API] Reduced from ${allTranscripts.length} to ${updatedAllTranscripts.length} characters`);
        
        const updatedPrompt = `Based on the following YouTube video transcripts, generate a clear and structured summary that directly answers the user's request:"${userQuery}. Make summary with user's request language"

Instructions for generating the summary:
1. Start by answering the user's query as directly as possible.
2. Use only information from the transcripts. Do not invent or assume anything not found in the transcripts.
3. Identify and include the most important points from each transcript that relate to the user's query.
4. If multiple transcripts discuss similar ideas or themes, highlight those recurring points.
5. If applicable, provide practical conclusions, lessons, or recommendations based on the transcripts.
6. Do not refer to the videos themselves (e.g., titles, URLs, creators, or platforms). Focus only on the content.
7. Write in simple, natural English. Avoid overly formal or academic tone.
8. Use formating the output with bullet points, emojis, or markdown. Use plain text and paragraphs only.
Transciptions:
${updatedAllTranscripts}`;

        // –†–µ–∫—É—Ä—Å–∏–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–ª–∏–Ω–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
        const processLongContent = async (videosToProcess, attempt = 1, maxAttempts = 5) => {
          console.log(`üîÑ [API] Processing attempt ${attempt}/${maxAttempts} with ${videosToProcess.length} videos`);
          
          const currentAllTranscripts = videosToProcess.map(video => 
            `Video: ${video.title}\nAuthor: ${video.author}\nTranscript: ${video.transcript}\n\n`
          ).join('---\n');
          
          const currentPrompt = `Based on the following YouTube video transcripts, generate a clear and structured summary that directly answers the user's request: "${userQuery}"

IMPORTANT LANGUAGE INSTRUCTION: ${languageConfig.instruction}

Instructions for generating the summary:
1. Start by answering the user's query as directly as possible.
2. Use only information from the transcripts. Do not invent or assume anything not found in the transcripts.
3. Identify and include the most important points from each transcript that relate to the user's query.
4. If multiple transcripts discuss similar ideas or themes, highlight those recurring points.
5. If applicable, provide practical conclusions, lessons, or recommendations based on the transcripts.
6. Do not refer to the videos themselves (e.g., titles, URLs, creators, or platforms). Focus only on the content.
7. Write in simple, natural tone that matches the language of the user's request.
8. Use formatting with bullet points, emojis, or markdown. Use plain text and paragraphs only.
9. Remember: Write the ENTIRE summary in ${languageConfig.languageName}.

Transcripts:
${currentAllTranscripts}`;

          try {
            const attemptResponse = await fetch('https://openrouter.ai/api/v1/chat/completions', {
              method: 'POST',
              headers: {
                'Authorization': `Bearer ${openRouterApiKey}`,
                'HTTP-Referer': 'http://localhost:3001',
                'X-Title': 'YouTube Searcher',
                'Content-Type': 'application/json',
              },
              body: JSON.stringify({
                model: model,
                messages: [
                  {
                    role: "user",
                    content: currentPrompt
                  }
                ],
                max_tokens: 2000,
                temperature: 0.7
              })
            });

            if (!attemptResponse.ok) {
              const attemptErrorData = await attemptResponse.json();
              const attemptErrorMessage = attemptErrorData.error?.message || attemptResponse.statusText;
              
              // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –æ—à–∏–±–∫–∞ —Å–≤—è–∑–∞–Ω–Ω–æ–π —Å –ø—Ä–µ–≤—ã—à–µ–Ω–∏–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
              if ((attemptErrorMessage.includes('maximum context length') || 
                   attemptErrorMessage.includes('context_length_exceeded') || 
                   attemptErrorMessage.includes('tokens. However, you requested about') ||
                   attemptErrorMessage.includes('Please reduce the length')) && 
                  attempt < maxAttempts) {
                
                console.log(`‚ö†Ô∏è [API] Context still too large on attempt ${attempt}. Finding next longest video...`);
                
                // –ù–∞—Ö–æ–¥–∏–º —Å–ª–µ–¥—É—é—â–µ–µ —Å–∞–º–æ–µ –¥–ª–∏–Ω–Ω–æ–µ –≤–∏–¥–µ–æ (–∏—Å–∫–ª—é—á–∞—è —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ)
                let nextLongestVideo = null;
                let nextMaxLength = 0;
                let nextLongestIndex = -1;
                
                videosToProcess.forEach((video, index) => {
                  const transcriptLength = video.transcript ? video.transcript.length : 0;
                  if (transcriptLength > nextMaxLength && !video.isTranscriptSummarized) {
                    nextMaxLength = transcriptLength;
                    nextLongestVideo = video;
                    nextLongestIndex = index;
                  }
                });
                
                if (!nextLongestVideo) {
                  throw new Error(`No more videos to process - all have been summarized but context is still too large`);
                }
                
                console.log(`üìù [API] Next longest video: "${nextLongestVideo.title}" with ${nextMaxLength} characters`);
                
                // –°–æ–∑–¥–∞–µ–º summary –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ –¥–ª–∏–Ω–Ω–æ–≥–æ –≤–∏–¥–µ–æ
                const nextSummaryPrompt = `Create a very concise summary of this YouTube video transcript. Focus ONLY on the main points and key insights. Keep it under 200 words and be very brief.

IMPORTANT LANGUAGE INSTRUCTION: ${languageConfig.instruction}

Video: ${nextLongestVideo.title}
Author: ${nextLongestVideo.author}
Transcript: ${nextLongestVideo.transcript}`;

                const nextSummaryResponse = await fetch('https://openrouter.ai/api/v1/chat/completions', {
                  method: 'POST',
                  headers: {
                    'Authorization': `Bearer ${openRouterApiKey}`,
                    'HTTP-Referer': 'http://localhost:3001',
                    'X-Title': 'YouTube Searcher',
                    'Content-Type': 'application/json',
                  },
                  body: JSON.stringify({
                    model: model,
                    messages: [
                      {
                        role: "user",
                        content: nextSummaryPrompt
                      }
                    ],
                    max_tokens: 400,
                    temperature: 0.5
                  })
                });

                if (!nextSummaryResponse.ok) {
                  throw new Error(`Failed to create summary for next longest video`);
                }

                const nextSummaryCompletion = await nextSummaryResponse.json();
                const nextSummary = nextSummaryCompletion.choices[0].message.content;
                
                console.log(`‚úÖ [API] Next summary created for "${nextLongestVideo.title}"`);
                console.log(`üìÑ [API] Next summary length: ${nextSummary.length} characters`);
                
                // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ª–µ–¥—É—é—â–µ–µ –≤–∏–¥–µ–æ
                const nextUpdatedVideos = [...videosToProcess];
                nextUpdatedVideos[nextLongestIndex] = {
                  ...nextLongestVideo,
                  transcript: nextSummary,
                  isTranscriptSummarized: true
                };
                
                console.log(`üîÑ [API] Updated next video data for "${nextLongestVideo.title}"`);
                
                // –†–µ–∫—É—Ä—Å–∏–≤–Ω–æ –ø—Ä–æ–±—É–µ–º —Å–Ω–æ–≤–∞
                return await processLongContent(nextUpdatedVideos, attempt + 1, maxAttempts);
              } else {
                throw new Error(`OpenRouter API error on attempt ${attempt}: ${attemptErrorMessage}`);
              }
            }

            // –£—Å–ø–µ—à–Ω—ã–π –æ—Ç–≤–µ—Ç
            const attemptCompletion = await attemptResponse.json();
            return {
              completion: attemptCompletion,
              processedVideos: videosToProcess
            };
            
          } catch (error) {
            if (attempt >= maxAttempts) {
              throw new Error(`Maximum attempts (${maxAttempts}) reached. Last error: ${error.message}`);
            }
            throw error;
          }
        };

        // –ó–∞–ø—É—Å–∫–∞–µ–º —Ä–µ–∫—É—Ä—Å–∏–≤–Ω—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É
        const processResult = await processLongContent(updatedVideosWithTranscripts);
        const retryCompletion = processResult.completion;
        const finalProcessedVideos = processResult.processedVideos;
        const retrySummary = retryCompletion.choices[0].message.content;
        
        const result = {
          summary: retrySummary,
          totalResults: videos.length,
          transcriptCount: videosWithTranscripts.length,
          hasLongContentProcessing: true,
          longContentMessage: "too long content, making summary for the most long video and trying again",
          processedLongestVideo: {
            title: longestVideo.title,
            author: longestVideo.author,
            videoId: longestVideo.videoId,
            originalTranscriptLength: maxLength,
            summaryLength: individualSummary.length
          },
          updatedVideos: finalProcessedVideos, // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤–∏–¥–µ–æ
          videosProcessed: finalProcessedVideos.map(v => ({
            title: v.title,
            author: v.author,
            videoId: v.videoId,
            isTranscriptSummarized: v.isTranscriptSummarized || false
          }))
        };
        
        console.log(`‚úÖ [API] Summary created successfully after processing longest video`);
        console.log(`üìä [API] Sending ${result.updatedVideos.length} updated videos to frontend`);
        console.log(`üìä [API] Final videos summary:`, result.updatedVideos.map(v => ({
          title: v.title,
          videoId: v.videoId,
          transcriptLength: v.transcript ? v.transcript.length : 0,
          isTranscriptSummarized: v.isTranscriptSummarized
        })));
        console.log(`üìä [API] Results:`, result);
        
        return res.json(result);
      } else {
        console.log(`‚ùå [API] This is NOT a context length error. Error type: other`);
        throw new Error(`OpenRouter API error: ${errorMessage}`);
      }
    }

    const completion = await response.json();
    const summary = completion.choices[0].message.content;
    
    const result = {
      summary: summary,
      totalResults: videos.length,
      transcriptCount: videosWithTranscripts.length,
      videosProcessed: videosWithTranscripts.map(v => ({
        title: v.title,
        author: v.author,
        videoId: v.videoId
      }))
    };
    
    console.log(`‚úÖ [API] Summary created successfully`);
    console.log(`üìä [API] Results:`, result);
    
    res.json(result);
    
  } catch (error) {
    console.error('‚ùå [API] Error creating summary:', error.message);
    res.status(500).json({ 
      error: 'Failed to create summary',
      details: error.message 
    });
  }
});


// Start server
app.listen(PORT, () => {
  console.log(`üöÄ [SERVER] YouTube search server running on http://localhost:${PORT}`);
  console.log(`üì° [SERVER] Available endpoints:`);
  console.log(`   GET  /api/search?q=<query>&limit=<number>`);
  console.log(`   POST /api/batch-search (with phrases array in body)`);
  console.log(`   POST /api/transcript (single video transcript)`);
  console.log(`   POST /api/transcripts (batch transcripts)`);
  console.log(`   POST /api/summarize-transcripts (summarize transcripts)`);
  console.log(`   POST /api/summarize-videos (summarize videos directly)`);
  if (SUPADATA_API_KEY === "YOUR_API_KEY_HERE") {
    console.log(`‚ö†Ô∏è  [SUPADATA] –ù–µ –∑–∞–±—É–¥—å—Ç–µ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å API –∫–ª—é—á –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π SUPADATA_API_KEY!`);
  } else {
    console.log(`üîë [SUPADATA] API Key: ${SUPADATA_API_KEY.substring(0, 10)}...`);
  }
});